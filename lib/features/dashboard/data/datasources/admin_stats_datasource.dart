import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/shared/models/admin_stats_model.dart';

part 'admin_stats_datasource.g.dart';

/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
abstract class AdminStatsDataSource {
  Future<ProductStatsResponse> getProductsStats();
  Future<SalesStatsResponse> getSalesStats();
  Future<UsersStatsResponse> getUsersStats();
  Future<WarehousesStatsResponse> getWarehousesStats();
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞
class AdminStatsRemoteDataSource implements AdminStatsDataSource {
  final Dio _dio;

  AdminStatsRemoteDataSource(this._dio);

  @override
  Future<ProductStatsResponse> getProductsStats() async {
    try {
      final response = await _dio.get('/products/stats');
      // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–µ—Ä—Ç–∫–µ {success: true, data: {...}}
      if (response.data is Map<String, dynamic> && response.data['success'] == true) {
        final productData = ProductStatsModel.fromJson(response.data['data']);
        return ProductStatsResponse(success: true, data: productData);
      } else {
        // –ò–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–∞–Ω–Ω—ã–µ
        final productData = ProductStatsModel.fromJson(response.data);
        return ProductStatsResponse(success: true, data: productData);
      }
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /products/stats –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö');
    }
  }

  @override
  Future<SalesStatsResponse> getSalesStats() async {
    try {
      final response = await _dio.get('/sales/stats');
      print('üü¢ SalesStats API response: ${response.data}');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (response.data is Map<String, dynamic>) {
        final data = response.data as Map<String, dynamic>;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ—Ä—Ç–∫–∞ success/data
        if (data.containsKey('success') && data.containsKey('data')) {
          return SalesStatsResponse.fromJson(data);
        } else {
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
          return SalesStatsResponse(
            success: true,
            data: SalesStatsModel.fromJson(data),
          );
        }
      }
      
      return SalesStatsResponse(success: true, data: SalesStatsModel.fromJson(response.data));
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /sales/stats –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ /sales/stats: $e.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö');
    }
  }

  @override
  Future<UsersStatsResponse> getUsersStats() async {
    try {
      // API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /users/stats, –∏—Å–ø–æ–ª—å–∑—É–µ–º /users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      final response = await _dio.get('/users');
      print('üü¢ Users API response for stats: ${response.data}');
      
      final usersData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      int total = usersData.length;
      int active = 0;
      int blocked = 0;
      Map<String, int> byRole = {};
      
      for (final user in usersData) {
        final userMap = user as Map<String, dynamic>;
        
        // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ is_active)
        if (userMap['is_active'] == true) {
          active++;
        } else {
          blocked++;
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
        final role = userMap['role']?.toString() ?? 'unknown';
        byRole[role] = (byRole[role] ?? 0) + 1;
      }
      
      return UsersStatsResponse(
        success: true,
        data: UsersStatsModel(
          total: total,
          active: active,
          blocked: blocked,
          byRole: byRole,
        ),
      );
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /users –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
    }
  }

  @override
  Future<WarehousesStatsResponse> getWarehousesStats() async {
    try {
      // API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /warehouses/stats, –∏—Å–ø–æ–ª—å–∑—É–µ–º /warehouses –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      final response = await _dio.get('/warehouses');
      print('üü¢ Warehouses API response for stats: ${response.data}');
      
      final warehousesData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
      int total = warehousesData.length;
      int active = 0;
      int inactive = 0;
      
      for (final warehouse in warehousesData) {
        final warehouseMap = warehouse as Map<String, dynamic>;
        
        // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        if (warehouseMap['is_active'] == true) {
          active++;
        } else {
          inactive++;
        }
      }
      
      return WarehousesStatsResponse(
        success: true,
        data: WarehousesStatsModel(
          total: total,
          active: active,
          inactive: inactive,
        ),
      );
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /warehouses –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–ª–∞–¥–æ–≤: $e.');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö');
    }
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è AdminStatsDataSource
@riverpod
AdminStatsDataSource adminStatsDataSource(AdminStatsDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return AdminStatsRemoteDataSource(dio);
}
