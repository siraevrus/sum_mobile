import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/shared/models/dashboard_stats.dart';

part 'dashboard_remote_datasource.g.dart';

/// Remote data source –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
abstract class DashboardRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Future<DashboardStats> getDashboardStats();
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–ª–∞–¥–∞–º
  Future<List<WarehouseStats>> getWarehousesStats();
  
  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
  Future<List<SalesChartData>> getSalesChartData({
    required DateTime startDate,
    required DateTime endDate,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã
  Future<List<TopProduct>> getTopProducts({int limit = 10});
  
  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Future<List<RecentActivity>> getRecentActivities({int limit = 20});
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
class DashboardRemoteDataSourceImpl implements DashboardRemoteDataSource {
  final Dio _dio;
  
  DashboardRemoteDataSourceImpl(this._dio);
  
  @override
  Future<DashboardStats> getDashboardStats() async {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
      final productsResponse = await _dio.get('/products/stats');
      print('üì• Products response: ${productsResponse.data}');
      
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂...');
      final salesResponse = await _dio.get('/sales/stats');
      print('üì• Sales response: ${salesResponse.data}');
      
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...');
      final companiesResponse = await _dio.get('/companies', queryParameters: {
        'page': 1,
        'per_page': 15,
      });
      print('üì• Companies response: ${companiesResponse.data}');
      
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      final usersResponse = await _dio.get('/users');
      print('üì• Users response: ${usersResponse.data}');
      
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏...');
      Map<String, dynamic> goodsInTransitData;
      try {
        final goodsInTransitResponse = await _dio.get('/products', queryParameters: {
          'status': 'in_transit',
          'per_page': 10,
        });
        print('üì• Goods in transit response: ${goodsInTransitResponse.data}');
        goodsInTransitData = goodsInTransitResponse.data as Map<String, dynamic>;
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: $e, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_transit"');
        // Fallback: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_transit"
        try {
          final productsInTransitResponse = await _dio.get('/products', queryParameters: {
            'status': 'in_transit',
          });
          goodsInTransitData = productsInTransitResponse.data as Map<String, dynamic>;
        } catch (e2) {
          print('‚ö†Ô∏è Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: $e2, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0');
          goodsInTransitData = {'data': [], 'meta': {'total': 0}};
        }
      }
      
      print('üîµ Dashboard: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...');
      final requestsResponse = await _dio.get('/requests', queryParameters: {
        'page': 1,
        'per_page': 15,
      });
      print('üì• Requests response: ${requestsResponse.data}');
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
      final productsData = productsResponse.data is Map<String, dynamic> && productsResponse.data['success'] == true
          ? productsResponse.data['data']
          : productsResponse.data;
          
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂  
      final salesData = salesResponse.data is Map<String, dynamic> && salesResponse.data['success'] == true
          ? salesResponse.data['data'] 
          : salesResponse.data;
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
      final companiesData = companiesResponse.data as Map<String, dynamic>;
      final totalCompanies = companiesData['pagination']?['total'] ?? 
          companiesData['meta']?['total'] ?? 0;
      final companiesItems = companiesData['data'] as List<dynamic>? ?? [];
      final activeCompanies = companiesItems.where((company) => 
        company['is_active'] == true || company['is_archived'] != true
      ).length;
      
      print('üìà Companies: total=$totalCompanies, active=$activeCompanies');
          
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final usersData = usersResponse.data is Map<String, dynamic> && usersResponse.data['data'] != null
          ? usersResponse.data['data'] as List<dynamic>
          : usersResponse.data as List<dynamic>;
          
      // –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏ (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã—à–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
      final goodsInTransitCount = goodsInTransitData['pagination']?['total'] ?? 
          goodsInTransitData['meta']?['total'] ?? 
          (goodsInTransitData['data'] as List<dynamic>?)?.length ?? 0;
      
      print('üöõ Goods in transit: count=$goodsInTransitCount');
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å—ã (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
      final requestsData = requestsResponse.data as Map<String, dynamic>;
      final totalRequests = requestsData['pagination']?['total'] ?? 
          requestsData['meta']?['total'] ?? 0;
      
      print('üìù Requests: total=$totalRequests');
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final totalEmployees = usersData.length;
      final activeEmployees = usersData.where((user) => 
        user['is_blocked'] != true
      ).length;
      
      // –ü–æ–ª—É—á–∞–µ–º average_sale –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      final averageSaleValue = salesData['average_sale'];
      final averageSaleRounded = averageSaleValue is String 
          ? double.tryParse(averageSaleValue)?.round() ?? 0
          : (averageSaleValue as num?)?.round() ?? 0;
      
      print('üìä Dashboard Stats:');
      print('  - –¢–æ–≤–∞—Ä—ã: ${productsData['total_products']}');
      print('  - –ö–æ–º–ø–∞–Ω–∏–∏: $totalCompanies (–∞–∫—Ç–∏–≤–Ω—ã—Ö: $activeCompanies)');
      print('  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: $totalEmployees (–∞–∫—Ç–∏–≤–Ω—ã—Ö: $activeEmployees)');
      print('  - –ü—Ä–æ–¥–∞–∂–∏ (average_sale): $averageSaleRounded ‚ÇΩ');
      print('  - –¢–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏: $goodsInTransitCount');
      print('  - –ó–∞–ø—Ä–æ—Å—ã: $totalRequests');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      return DashboardStats(
        totalProducts: productsData['total_products'] ?? 0,
        lowStockProducts: productsData['low_stock'] ?? 0,
        totalCompanies: totalCompanies,
        activeCompanies: activeCompanies,
        totalEmployees: totalEmployees,
        activeEmployees: activeEmployees,
        todaySales: averageSaleRounded.toDouble(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º average_sale –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        monthlySales: (salesData['month_revenue'] ?? 0.0).toDouble(),
        goodsInTransit: goodsInTransitCount,
        todayRequests: totalRequests, // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        lastUpdated: DateTime.now(),
      );
    } on DioException catch (e) {
      print('üî¥ Dashboard: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.response?.statusCode} - ${e.message}');
      print('üî¥ Response data: ${e.response?.data}');
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}');
    } catch (e) {
      print('üî¥ Dashboard: –û–±—â–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }
  
  @override
  Future<List<WarehouseStats>> getWarehousesStats() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
      final response = await _dio.get('/warehouses');
      final warehousesData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–æ–≤ (–ø–æ–∫–∞ —á—Ç–æ –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
      return warehousesData.map((json) {
        final warehouse = json as Map<String, dynamic>;
        return WarehouseStats(
          warehouseId: warehouse['id'] ?? 0,
          warehouseName: warehouse['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥',
          location: warehouse['address'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          totalProducts: 0, // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API
          occupancyRate: 0.0,  // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API
        );
      }).toList();
    } on DioException catch (e) {
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö');
    }
  }
  
  @override
  Future<List<SalesChartData>> getSalesChartData({
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –¥–∞—Ç–µ
      final response = await _dio.get('/sales', queryParameters: {
        'date_from': startDate.toIso8601String().split('T')[0],
        'date_to': endDate.toIso8601String().split('T')[0],
        'per_page': 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      });
      
      final salesData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      final Map<String, double> dailySales = {};
      for (final sale in salesData) {
        final saleMap = sale as Map<String, dynamic>;
        final dateStr = saleMap['sale_date']?.toString().split('T')[0] ?? '';
        final amount = (saleMap['total_price'] ?? 0.0).toDouble();
        dailySales[dateStr] = (dailySales[dateStr] ?? 0.0) + amount;
      }
      
      return dailySales.entries.map((entry) => SalesChartData(
        period: entry.key,
        amount: entry.value,
        quantity: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤ API
      )).toList();
    } on DioException catch (e) {
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö');
    }
  }
  
  @override
  Future<List<TopProduct>> getTopProducts({int limit = 10}) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API
      final response = await _dio.get('/products/popular');
      final responseData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      return responseData.take(limit).map((json) {
        final product = json as Map<String, dynamic>;
        return TopProduct(
          productId: product['id'] ?? 0,
          name: product['name'] ?? '–¢–æ–≤–∞—Ä ${product['id']}',
          category: product['template']?['name'] ?? '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          soldQuantity: product['total_sales'] ?? 0,
          totalRevenue: double.tryParse(product['total_revenue']?.toString() ?? '0') ?? 0.0,
          currentStock: product['quantity'] ?? 0,
        );
      }).toList();
    } on DioException catch (e) {
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞—Ö');
    }
  }
  
  @override
  Future<List<RecentActivity>> getRecentActivities({int limit = 20}) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
      final response = await _dio.get('/sales', queryParameters: {
        'per_page': limit,
        'page': 1,
      });
      
      final salesData = response.data is Map<String, dynamic> && response.data['data'] != null
          ? response.data['data'] as List<dynamic>
          : response.data as List<dynamic>;
      
      return salesData.map((json) {
        final sale = json as Map<String, dynamic>;
        return RecentActivity(
          id: sale['id']?.toString() ?? '0',
          type: 'sale',
          description: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—É–º–º—É ${sale['total_price']} ${sale['currency'] ?? 'RUB'}',
          userName: sale['user_id']?.toString() ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
          timestamp: DateTime.tryParse(sale['sale_date']?.toString() ?? '') ?? DateTime.now(),
          status: 'success',
        );
      }).toList();
    } on DioException catch (e) {
      throw Exception('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö');
    }
  }

}

/// Provider –¥–ª—è remote data source –¥–∞—à–±–æ—Ä–¥–∞
@riverpod
DashboardRemoteDataSource dashboardRemoteDataSource(DashboardRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return DashboardRemoteDataSourceImpl(dio);
}



