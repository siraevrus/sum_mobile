import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/models/api_response_model.dart';
import 'package:sum_warehouse/features/products_inflow/data/datasources/products_inflow_remote_datasource.dart';
import 'package:sum_warehouse/features/products_inflow/data/models/product_inflow_model.dart';

part 'products_inflow_provider.freezed.dart';
part 'products_inflow_provider.g.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@freezed
class ProductsInflowState with _$ProductsInflowState {
  const factory ProductsInflowState.loading() = ProductsInflowLoading;
  const factory ProductsInflowState.loaded({
    required PaginatedResponse<ProductInflowModel> products,
    ProductInflowFilters? filters,
  }) = ProductsInflowLoaded;
  const factory ProductsInflowState.error(String message) = ProductsInflowError;
}

/// Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö
@riverpod
class ProductsInflow extends _$ProductsInflow {
  @override
  ProductsInflowState build() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    _loadProducts();
    return const ProductsInflowState.loading();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  Future<void> loadProducts([ProductInflowFilters? filters]) async {
    state = const ProductsInflowState.loading();
    await _loadProducts(filters);
  }

  /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  Future<void> refresh() async {
    final currentFilters = state is ProductsInflowLoaded 
        ? (state as ProductsInflowLoaded).filters 
        : null;
    await loadProducts(currentFilters);
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  Future<void> loadNextPage() async {
    if (state is! ProductsInflowLoaded) return;
    
    final currentState = state as ProductsInflowLoaded;
    final currentPage = currentState.products.pagination.currentPage;
    final lastPage = currentState.products.pagination.lastPage;
    
    if (currentPage >= lastPage) return;
    
    try {
      final nextFilters = currentState.filters?.copyWith(
        page: currentPage + 1,
      ) ?? ProductInflowFilters(page: currentPage + 1);
      
      final apiDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      final nextPageResponse = await apiDataSource.getProducts(nextFilters);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –Ω–æ–≤—ã–º–∏
      final allProducts = [
        ...currentState.products.data,
        ...nextPageResponse.data,
      ];
      
      state = ProductsInflowState.loaded(
        products: nextPageResponse.copyWith(data: allProducts),
        filters: nextFilters,
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $e');
    }
  }

  /// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> searchProducts(String query) async {
    final filters = ProductInflowFilters(
      search: query.isNotEmpty ? query : null,
      status: 'in_stock', // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in_stock
      page: 1,
    );
    await loadProducts(filters);
  }

  /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> filterProducts(ProductInflowFilters filters) async {
    final filteredFilters = filters.copyWith(status: 'in_stock');
    await loadProducts(filteredFilters);
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<ProductInflowModel> createProduct(CreateProductInflowRequest request) async {
    try {
      final apiDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      final newProduct = await apiDataSource.createProduct(request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
      
      return newProduct;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<ProductInflowModel> updateProduct(int id, UpdateProductInflowRequest request) async {
    try {
      final apiDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      final updatedProduct = await apiDataSource.updateProduct(id, request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
      
      return updatedProduct;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<void> deleteProduct(int id) async {
    try {
      final apiDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      await apiDataSource.deleteProduct(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> _loadProducts([ProductInflowFilters? filters]) async {
    try {
      final apiDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      final response = await apiDataSource.getProducts(filters);
      
      state = ProductsInflowState.loaded(
        products: response,
        filters: filters,
      );
    } catch (e, stackTrace) {
      print('üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: $e');
      print('üî¥ Stack trace: $stackTrace');
      state = ProductsInflowState.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: $e');
    }
  }
}

/// Provider –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@riverpod
Future<ProductInflowModel> productInflow(ProductInflowRef ref, int productId) async {
  final apiDataSource = ref.watch(productsInflowRemoteDataSourceProvider);
  return apiDataSource.getProduct(productId);
}
