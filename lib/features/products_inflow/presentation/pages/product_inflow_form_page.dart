import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:sum_warehouse/core/theme/app_colors.dart';
import 'package:sum_warehouse/features/products_inflow/data/datasources/products_inflow_remote_datasource.dart';
import 'package:sum_warehouse/features/products_inflow/data/models/product_inflow_model.dart';
import 'package:sum_warehouse/features/products_inflow/presentation/providers/products_inflow_provider.dart';
import 'package:sum_warehouse/features/producers/presentation/providers/producers_provider.dart';
import 'package:sum_warehouse/features/warehouses/presentation/providers/warehouses_provider.dart';
import 'package:sum_warehouse/features/warehouses/data/datasources/warehouses_remote_datasource.dart';
import 'package:sum_warehouse/shared/models/common_references.dart';
import 'package:sum_warehouse/shared/models/producer_model.dart';
import 'package:sum_warehouse/shared/models/warehouse_model.dart';
import 'package:sum_warehouse/shared/widgets/loading_widget.dart';

/// –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
class ProductInflowFormPage extends ConsumerStatefulWidget {
  final ProductInflowModel? product;
  final bool isViewMode;

  const ProductInflowFormPage({
    super.key,
    this.product,
    this.isViewMode = false,
  });

  @override
  ConsumerState<ProductInflowFormPage> createState() => _ProductInflowFormPageState();
}

class _ProductInflowFormPageState extends ConsumerState<ProductInflowFormPage> {
  final _formKey = GlobalKey<FormState>();
  final _quantityController = TextEditingController();
  final _transportNumberController = TextEditingController();
  final _nameController = TextEditingController();
  final _calculatedVolumeController = TextEditingController();

  bool _isLoading = false;
  int? _selectedWarehouseId;
  int? _selectedProducerId;
  int? _selectedProductTemplateId;
  DateTime? _selectedArrivalDate;

  List<WarehouseModel> _warehouses = [];
  List<ProducerModel> _producers = [];
  List<ProductTemplateReference> _productTemplates = [];

  bool get _isEditing => widget.product != null;

  @override
  void initState() {
    super.initState();
    print('üîµ ProductInflowFormPage: initState –Ω–∞—á–∞—Ç');
    _initializeForm();
    _loadData();
    print('üîµ ProductInflowFormPage: initState –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  @override
  void dispose() {
    _quantityController.dispose();
    _transportNumberController.dispose();
    _nameController.dispose();
    _calculatedVolumeController.dispose();
    super.dispose();
  }

  void _initializeForm() {
    if (_isEditing) {
      final product = widget.product!;
      _quantityController.text = product.quantity;
      _transportNumberController.text = product.transportNumber ?? '';
      _nameController.text = product.name ?? '';
      _calculatedVolumeController.text = product.calculatedVolume ?? '';
      _selectedWarehouseId = product.warehouseId;
      _selectedProducerId = product.producerId;
      _selectedProductTemplateId = product.productTemplateId;
      _selectedArrivalDate = product.arrivalDate != null ? DateTime.parse(product.arrivalDate!) : null;
    }
  }

  Future<void> _loadData() async {
    print('üîµ ProductInflowFormPage: _loadData –Ω–∞—á–∞—Ç');
    setState(() => _isLoading = true);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–ª–∞–¥—ã
      print('üîµ ProductInflowFormPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–ª–∞–¥—ã...');
      final warehousesDataSource = ref.read(warehousesRemoteDataSourceProvider);
      final warehousesResponse = await warehousesDataSource.getWarehouses(perPage: 100);
      _warehouses = warehousesResponse.data;
      print('üîµ ProductInflowFormPage: –°–∫–ª–∞–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_warehouses.length} —à—Ç');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
      print('üîµ ProductInflowFormPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π...');
      await ref.read(producersProvider.notifier).loadProducers();
      final producersState = ref.read(producersProvider);
      if (producersState.hasValue) {
        _producers = (producersState.value ?? []).cast<ProducerModel>();
        print('üîµ ProductInflowFormPage: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_producers.length} —à—Ç');
      } else {
        print('üîµ ProductInflowFormPage: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
      print('üîµ ProductInflowFormPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤...');
      final productsInflowDataSource = ref.read(productsInflowRemoteDataSourceProvider);
      final templatesResponse = await productsInflowDataSource.getProducts(ProductInflowFilters(perPage: 100));
      _productTemplates = templatesResponse.data.map((e) => ProductTemplateReference(
        id: e.productTemplateId, 
        name: e.template?.name, 
        unit: e.template?.unit
      )).toList();
      print('üîµ ProductInflowFormPage: –®–∞–±–ª–æ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_productTemplates.length} —à—Ç');

      setState(() {});
      print('üîµ ProductInflowFormPage: setState –≤—ã–∑–≤–∞–Ω, _isLoading = false');
    } catch (e) {
      print('üî¥ ProductInflowFormPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      print('üî¥ ProductInflowFormPage: Stack trace: ${StackTrace.current}');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e')),
        );
      }
    } finally {
      setState(() => _isLoading = false);
      print('üîµ ProductInflowFormPage: _loadData –∑–∞–≤–µ—Ä—à–µ–Ω, _isLoading = false');
    }
  }

  void _onQuantityChanged() {
    _calculateNameAndVolume();
  }

  void _onTemplateChanged() {
    _calculateNameAndVolume();
  }

  void _calculateNameAndVolume() {
    if (_selectedProductTemplateId == null || _quantityController.text.isEmpty) {
      _nameController.text = '';
      _calculatedVolumeController.text = '';
      return;
    }

    final template = _productTemplates.firstWhere(
      (t) => t.id == _selectedProductTemplateId,
      orElse: () => ProductTemplateReference(id: 0, name: ''),
    );

    if (template.name != null) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ x —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
      _nameController.text = template.name!;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ template
    _calculatedVolumeController.text = '0';
  }

  @override
  Widget build(BuildContext context) {
    print('üîµ ProductInflowFormPage: build –≤—ã–∑–≤–∞–Ω, _isLoading = $_isLoading');
    print('üîµ ProductInflowFormPage: _warehouses.length = ${_warehouses.length}');
    print('üîµ ProductInflowFormPage: _producers.length = ${_producers.length}');
    print('üîµ ProductInflowFormPage: _productTemplates.length = ${_productTemplates.length}');
    
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
        actions: widget.isViewMode ? null : [
          if (_isEditing)
            IconButton(
              onPressed: _deleteProduct,
              icon: const Icon(Icons.delete),
              tooltip: '–£–¥–∞–ª–∏—Ç—å',
            ),
        ],
      ),
      body: _isLoading
          ? const LoadingWidget()
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // –ë–ª–æ–∫ "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                    _buildSection(
                      title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                      children: [
                        // 1. –°–∫–ª–∞–¥ (–≤—ã–ø–∞–¥–∞—é—â–µ–µ –ø–æ–ª–µ)
                        _buildWarehouseDropdown(),
                        const SizedBox(height: 16),
                        
                        // 2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–≤—ã–ø–∞–¥–∞—é—â–µ–µ –ø–æ–ª–µ)
                        _buildProducerDropdown(),
                        const SizedBox(height: 16),
                        
                        // 3. –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        _buildDateField(
                          label: '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
                          selectedDate: _selectedArrivalDate,
                          onDateSelected: (date) {
                            setState(() {
                              _selectedArrivalDate = date;
                            });
                          },
                        ),
                        const SizedBox(height: 16),
                        
                        // 4. –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
                        _buildTextField(
                          controller: _transportNumberController,
                          label: '–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞',
                        ),
                      ],
                    ),

                    const SizedBox(height: 24),

                    // –ë–ª–æ–∫ "–¢–æ–≤–∞—Ä"
                    _buildSection(
                      title: '–¢–æ–≤–∞—Ä',
                      children: [
                        // –í—ã–ø–∞–¥–∞—é—â–µ–µ –ø–æ–ª–µ "–®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞"
                        _buildProductTemplateDropdown(),
                        const SizedBox(height: 16),
                        
                        // –ü–æ–ª–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        _buildTextField(
                          controller: _quantityController,
                          label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *',
                          isRequired: true,
                          keyboardType: TextInputType.number,
                          onChanged: (value) => _onQuantityChanged(),
                        ),
                        const SizedBox(height: 16),
                        
                        // –ü–æ–ª–µ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è)
                        _buildTextField(
                          controller: _nameController,
                          label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                          readOnly: true,
                          hintText: '–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                        ),
                        const SizedBox(height: 16),
                        
                        // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è)
                        _buildTextField(
                          controller: _calculatedVolumeController,
                          label: '–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º',
                          readOnly: true,
                          hintText: '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ',
                        ),
                      ],
                    ),

                    const SizedBox(height: 24),

                    // –ö–Ω–æ–ø–∫–∏
                    Row(
                      children: [
                        Expanded(
                          child: OutlinedButton(
                            onPressed: () => Navigator.of(context).pop(),
                            child: const Text('–û—Ç–º–µ–Ω–∞'),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: ElevatedButton(
                            onPressed: _isEditing ? _updateProduct : _createProduct,
                            child: Text(_isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildSection({
    required String title,
    required List<Widget> children,
  }) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.primary,
              ),
            ),
            const SizedBox(height: 16),
            ...children,
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    bool isRequired = false,
    TextInputType keyboardType = TextInputType.text,
    bool readOnly = false,
    String? hintText,
    Function(String)? onChanged,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        hintText: hintText,
        border: const OutlineInputBorder(),
        filled: readOnly,
        fillColor: readOnly ? Colors.grey.shade100 : null,
      ),
      keyboardType: keyboardType,
      readOnly: readOnly,
      onChanged: onChanged,
      validator: isRequired
          ? (value) {
              if (value == null || value.isEmpty) {
                return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ $label';
              }
              return null;
            }
          : null,
    );
  }

  Widget _buildWarehouseDropdown() {
    return DropdownButtonFormField<int>(
      value: _selectedWarehouseId,
      decoration: InputDecoration(
        labelText: '–°–∫–ª–∞–¥ *',
        border: const OutlineInputBorder(),
        filled: widget.isViewMode,
        fillColor: widget.isViewMode ? Colors.grey.shade100 : null,
      ),
      items: [
        const DropdownMenuItem(value: null, child: Text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥')),
        ..._warehouses.map((warehouse) => DropdownMenuItem(
          value: warehouse.id,
          child: Text(warehouse.name),
        )),
      ],
      onChanged: widget.isViewMode ? null : (value) {
        setState(() {
          _selectedWarehouseId = value;
        });
      },
      validator: (value) {
        if (value == null) {
          return '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥';
        }
        return null;
      },
    );
  }

  Widget _buildProducerDropdown() {
    return DropdownButtonFormField<int>(
      value: _selectedProducerId,
      decoration: InputDecoration(
        labelText: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å',
        border: const OutlineInputBorder(),
        filled: widget.isViewMode,
        fillColor: widget.isViewMode ? Colors.grey.shade100 : null,
      ),
      items: [
        const DropdownMenuItem(value: null, child: Text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è')),
        ..._producers.map((producer) => DropdownMenuItem(
          value: producer.id,
          child: Text(producer.name),
        )),
      ],
      onChanged: widget.isViewMode ? null : (value) {
        setState(() {
          _selectedProducerId = value;
        });
      },
    );
  }

  Widget _buildProductTemplateDropdown() {
    return DropdownButtonFormField<int>(
      value: _selectedProductTemplateId,
      decoration: InputDecoration(
        labelText: '–®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ *',
        border: const OutlineInputBorder(),
        filled: widget.isViewMode,
        fillColor: widget.isViewMode ? Colors.grey.shade100 : null,
      ),
      items: [
        const DropdownMenuItem(value: null, child: Text('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞')),
        ..._productTemplates.map((template) => DropdownMenuItem(
          value: template.id,
          child: Text(template.name ?? 'ID ${template.id}'),
        )),
      ],
      onChanged: widget.isViewMode ? null : (value) {
        setState(() {
          _selectedProductTemplateId = value;
        });
        _onTemplateChanged();
      },
      validator: (value) {
        if (value == null) {
          return '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞';
        }
        return null;
      },
    );
  }

  Widget _buildDateField({
    required String label,
    required DateTime? selectedDate,
    required Function(DateTime?) onDateSelected,
  }) {
    return TextFormField(
      readOnly: true,
      controller: TextEditingController(
        text: selectedDate != null ? DateFormat('yyyy-MM-dd').format(selectedDate) : '',
      ),
      decoration: InputDecoration(
        labelText: label,
        border: const OutlineInputBorder(),
        suffixIcon: widget.isViewMode ? null : const Icon(Icons.calendar_today),
        filled: widget.isViewMode,
        fillColor: widget.isViewMode ? Colors.grey.shade100 : null,
      ),
      onTap: widget.isViewMode
          ? null
          : () async {
              final DateTime? picked = await showDatePicker(
                context: context,
                initialDate: selectedDate ?? DateTime.now(),
                firstDate: DateTime(2000),
                lastDate: DateTime(2101),
              );
              onDateSelected(picked);
            },
    );
  }

  Future<void> _createProduct() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final createRequest = CreateProductInflowRequest(
        productTemplateId: _selectedProductTemplateId!,
        warehouseId: _selectedWarehouseId!,
        name: _nameController.text.isEmpty ? null : _nameController.text,
        quantity: _quantityController.text,
        calculatedVolume: _calculatedVolumeController.text.isEmpty ? null : _calculatedVolumeController.text,
        transportNumber: _transportNumberController.text.isEmpty ? null : _transportNumberController.text,
        producerId: _selectedProducerId,
        arrivalDate: _selectedArrivalDate != null ? DateFormat('yyyy-MM-dd').format(_selectedArrivalDate!) : null,
        isActive: true,
        status: 'in_stock',
      );

      await ref.read(productsInflowProvider.notifier).createProduct(createRequest);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _updateProduct() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final updateRequest = UpdateProductInflowRequest(
        name: _nameController.text.isEmpty ? null : _nameController.text,
        quantity: _quantityController.text,
        calculatedVolume: _calculatedVolumeController.text.isEmpty ? null : _calculatedVolumeController.text,
        transportNumber: _transportNumberController.text.isEmpty ? null : _transportNumberController.text,
        producerId: _selectedProducerId,
        arrivalDate: _selectedArrivalDate != null ? DateFormat('yyyy-MM-dd').format(_selectedArrivalDate!) : null,
      );

      await ref.read(productsInflowProvider.notifier).updateProduct(widget.product!.id, updateRequest);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _deleteProduct() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
        content: const Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: const Text('–£–¥–∞–ª–∏—Ç—å', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    setState(() => _isLoading = true);

    try {
      await ref.read(productsInflowProvider.notifier).deleteProduct(widget.product!.id);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }
}
