import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:sum_warehouse/features/products_inflow/data/models/product_inflow_model.dart';
import 'package:sum_warehouse/features/products_inflow/presentation/pages/product_inflow_form_page.dart';
import 'package:sum_warehouse/features/products_inflow/data/datasources/products_inflow_remote_datasource.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';

/// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
class ProductInflowDetailPage extends ConsumerStatefulWidget {
  final ProductInflowModel product;

  const ProductInflowDetailPage({
    super.key,
    required this.product,
  });

  @override
  ConsumerState<ProductInflowDetailPage> createState() => _ProductInflowDetailPageState();
}

class _ProductInflowDetailPageState extends ConsumerState<ProductInflowDetailPage> {
  Map<String, String>? _attributeNames; // –ö—ç—à –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
  bool _isLoadingAttributes = false;
  ProductInflowModel? _currentProduct; // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞

  @override
  void initState() {
    super.initState();
    _currentProduct = widget.product;
    _loadProductTemplate();
  }

  ProductInflowModel get _product => _currentProduct ?? widget.product;

  Future<void> _refreshProductData() async {
    if (_currentProduct == null) return;

    try {
      print('üîµ ProductInflowDetailPage: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ ID: ${_currentProduct!.id}');
      
      final dio = ref.read(dioClientProvider);
      final response = await dio.get('/products/${_currentProduct!.id}');
      
      print('üîµ ProductInflowDetailPage: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: ${response.data}');
      
      if (response.data is Map<String, dynamic>) {
        final data = response.data as Map<String, dynamic>;
        
        if (data['success'] == true && data['data'] != null) {
          final productData = data['data'] as Map<String, dynamic>;
          _currentProduct = ProductInflowModel.fromJson(productData);
          print('üîµ ProductInflowDetailPage: –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      }
      
      setState(() {});
    } catch (e) {
      print('üî¥ ProductInflowDetailPage: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  Future<void> _loadProductTemplate() async {
    if (_product.productTemplateId == null) return;
    
    setState(() => _isLoadingAttributes = true);
    
    try {
      print('üîµ ProductInflowDetailPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ ID: ${_product.productTemplateId}');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /product-templates/{id}
      final dio = ref.read(dioClientProvider);
      final response = await dio.get('/product-templates/${_product.productTemplateId}');
      
      print('üîµ ProductInflowDetailPage: –û—Ç–≤–µ—Ç API /product-templates: ${response.data}');
      
      final data = response.data;
      print('üîµ ProductInflowDetailPage: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${data.runtimeType}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å {success: true, data: {...}} –∏–ª–∏ –ø—Ä—è–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      Map<String, dynamic>? templateData;
      if (data is Map<String, dynamic>) {
        if (data['success'] == true && data['data'] != null) {
          // –§–æ—Ä–º–∞—Ç {success: true, data: {...}}
          templateData = data['data'] as Map<String, dynamic>;
          print('üîµ ProductInflowDetailPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º data –∏–∑ success/data —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
        } else {
          // –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç
          templateData = data;
          print('üîµ ProductInflowDetailPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç');
        }
      }
      
      if (templateData != null && templateData['attributes'] != null) {
        final attributes = templateData['attributes'] as List<dynamic>;
        final attributeNames = <String, String>{};
        
        for (final attr in attributes) {
          if (attr is Map<String, dynamic>) {
            final variable = attr['variable'] as String?;
            final name = attr['name'] as String?;
            if (variable != null && name != null) {
              attributeNames[variable] = name;
            }
          }
        }
        
        print('üîµ ProductInflowDetailPage: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤: $attributeNames');
        setState(() {
          _attributeNames = attributeNames;
          _isLoadingAttributes = false;
        });
      } else {
        print('üîµ ProductInflowDetailPage: –ê—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ');
        setState(() {
          _attributeNames = {};
          _isLoadingAttributes = false;
        });
      }
    } catch (e) {
      print('üî¥ ProductInflowDetailPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: $e');
      setState(() => _isLoadingAttributes = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    print('üîµ ProductInflowDetailPage: build –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: ${_product.id}');
    print('üîµ ProductInflowDetailPage: product.name = ${_product.name}');
    print('üîµ ProductInflowDetailPage: product.warehouse = ${_product.warehouse?.name}');
    print('üîµ ProductInflowDetailPage: product.producer = ${_product.producer?.name}');
    print('üîµ ProductInflowDetailPage: product.template = ${_product.template?.name}');
    
    return Scaffold(
      appBar: AppBar(
        title: Text(_product.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
        actions: [
          IconButton(
            onPressed: () async {
              final result = await Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => ProductInflowFormPage(product: _currentProduct ?? widget.product),
                ),
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              if (result == true || result == null) {
                await _refreshProductData();
              }
            },
            icon: const Icon(Icons.edit),
            tooltip: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            _buildSection(
              title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
              children: [
                _buildInfoRow('–ù–∞–∑–≤–∞–Ω–∏–µ', _product.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                if (_product.description != null && _product.description!.isNotEmpty)
                  _buildInfoRow('–û–ø–∏—Å–∞–Ω–∏–µ', _product.description!),
                _buildInfoRow('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', _product.quantity),
                _buildInfoRow('–û–±—ä–µ–º', '${_product.calculatedVolume ?? '0'} ${_product.template?.unit ?? ''}'),
                _buildInfoRow('–°–∫–ª–∞–¥', _product.warehouse?.name ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                _buildInfoRow('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', _product.producer?.name ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                _buildInfoRow('–°–æ–∑–¥–∞—Ç–µ–ª—å', _product.creator?.name ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                _buildInfoRow('–®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞', _product.template?.name ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                _buildInfoRow('–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞', _product.transportNumber ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                _buildInfoRow('–ú–µ—Å—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏', _product.shippingLocation ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                _buildInfoRow('–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', _product.shippingDate != null 
                    ? _formatDate(_product.shippingDate!) 
                    : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                _buildInfoRow('–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è', _product.expectedArrivalDate != null 
                    ? _formatDate(_product.expectedArrivalDate!) 
                    : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                _buildInfoRow('–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', _product.arrivalDate != null 
                    ? _formatDate(_product.arrivalDate!) 
                    : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
              ],
            ),

            const SizedBox(height: 24),

            // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            if (_product.attributes != null && _product.attributes is Map && (_product.attributes as Map).isNotEmpty)
              _buildSection(
                title: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞',
                children: _isLoadingAttributes 
                    ? [const Center(child: CircularProgressIndicator())]
                    : (_product.attributes as Map).entries
                        .map((entry) => _buildInfoRow(
                            _getAttributeDisplayName(entry.key.toString()), 
                            entry.value.toString()))
                        .toList(),
              ),

            const SizedBox(height: 24),

            // –î–æ–∫—É–º–µ–Ω—Ç—ã
            if (_product.documentPath != null && _product.documentPath.isNotEmpty)
              _buildSection(
                title: '–î–æ–∫—É–º–µ–Ω—Ç—ã',
                children: [
                  ..._product.documentPath.map((path) => _buildDocumentItem(context, path)),
                ],
              ),

            const SizedBox(height: 24),

            // –ó–∞–º–µ—Ç–∫–∏
            if (_product.notes != null && _product.notes!.isNotEmpty)
              _buildSection(
                title: '–ó–∞–º–µ—Ç–∫–∏',
                children: [
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey.shade200),
                    ),
                    child: Text(
                      _product.notes!,
                      style: const TextStyle(
                        fontSize: 14,
                        color: Color(0xFF2D3748),
                        height: 1.5,
                      ),
                    ),
                  ),
                ],
              ),

            const SizedBox(height: 24),

            // –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏
            if (_product.correction != null || _product.correctionStatus != null)
              _buildSection(
                title: '–ö–æ—Ä—Ä–µ–∫—Ü–∏–∏',
                children: [
                  if (_product.correction != null)
                    _buildInfoRow('–ö–æ—Ä—Ä–µ–∫—Ü–∏—è', _product.correction!),
                  if (_product.correctionStatus != null)
                    _buildInfoRow('–°—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏', _product.correctionStatus!),
                  if (_product.revisedAt != null)
                    _buildInfoRow('–î–∞—Ç–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞', _formatDateTime(_product.revisedAt!)),
                ],
              ),
          ],
        ),
      ),
    );
  }

  String _getAttributeDisplayName(String variable) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if (_attributeNames != null && _attributeNames!.containsKey(variable)) {
      return _attributeNames![variable]!;
    }
    return variable; // Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  }

  Widget _buildSection({
    required String title,
    required List<Widget> children,
  }) {
    print('üîµ ProductInflowDetailPage: _buildSection –≤—ã–∑–≤–∞–Ω –¥–ª—è "$title" —Å ${children.length} –¥–µ—Ç—å–º–∏');
    try {
      return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w600,
            color: Color(0xFF1A1A1A),
          ),
        ),
        const SizedBox(height: 12),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            children: children,
          ),
        ),
      ],
    );
    } catch (e) {
      print('üî¥ ProductInflowDetailPage: –û—à–∏–±–∫–∞ –≤ _buildSection "$title": $e');
      return Container(
        padding: const EdgeInsets.all(16),
        child: Text('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏: $e'),
      );
    }
  }

  Widget _buildInfoRow(String label, String value) {
    print('üîµ ProductInflowDetailPage: _buildInfoRow –≤—ã–∑–≤–∞–Ω –¥–ª—è "$label" = "$value"');
    try {
      return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey.shade600,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF1A1A1A),
              ),
            ),
          ),
        ],
      ),
    );
    } catch (e) {
      print('üî¥ ProductInflowDetailPage: –û—à–∏–±–∫–∞ –≤ _buildInfoRow "$label": $e');
      return Container(
        padding: const EdgeInsets.all(8),
        child: Text('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e'),
      );
    }
  }

  Widget _buildDocumentItem(BuildContext context, String path) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Row(
        children: [
          Icon(
            Icons.description,
            size: 20,
            color: Colors.grey.shade600,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              path.split('/').last,
              style: const TextStyle(fontSize: 14),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          IconButton(
            onPressed: () {
              // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')),
              );
            },
            icon: Icon(
              Icons.open_in_new,
              size: 18,
              color: Colors.grey.shade600,
            ),
          ),
        ],
      ),
    );
  }

  String _getStatusText(String status) {
    switch (status) {
      case 'in_stock':
        return '–ù–∞ —Å–∫–ª–∞–¥–µ';
      case 'for_receipt':
        return '–ù–∞ –ø—Ä–∏–µ–º–∫–µ';
      case 'in_transit':
        return '–í –ø—É—Ç–∏';
      default:
        return status;
    }
  }

  String _formatDate(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year}';
    } catch (e) {
      return dateString;
    }
  }

  String _formatDateTime(String dateTimeString) {
    try {
      print('üîµ ProductInflowDetailPage: _formatDateTime –≤—ã–∑–≤–∞–Ω –¥–ª—è "$dateTimeString"');
      final dateTime = DateTime.parse(dateTimeString);
      final result = '${dateTime.day.toString().padLeft(2, '0')}.${dateTime.month.toString().padLeft(2, '0')}.${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
      print('üîµ ProductInflowDetailPage: _formatDateTime —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "$result"');
      return result;
    } catch (e) {
      print('üî¥ ProductInflowDetailPage: –û—à–∏–±–∫–∞ –≤ _formatDateTime: $e');
      return dateTimeString;
    }
  }
}
