import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../../../../core/network/dio_client.dart';
import '../../../../core/error/app_exceptions.dart';
import '../../../../shared/models/inventory_models.dart';

part 'inventory_stocks_remote_datasource.g.dart';

/// Abstract interface for inventory stocks remote data source
abstract class InventoryStocksRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
  Future<InventoryStocksResponse> getStocks({
    int page = 1,
    int perPage = 15,
    int? warehouseId,
    String? status,
  });

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
  Future<List<InventoryProducerModel>> getProducers();

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
  Future<InventoryWarehousesResponse> getWarehouses({
    int page = 1,
    int perPage = 50,
  });

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
  Future<InventoryCompaniesResponse> getCompanies({
    int page = 1,
    int perPage = 50,
  });
}

/// Implementation of inventory stocks remote data source
class InventoryStocksRemoteDataSourceImpl implements InventoryStocksRemoteDataSource {
  final Dio _dio;
  
  InventoryStocksRemoteDataSourceImpl(this._dio);

  @override
  Future<InventoryStocksResponse> getStocks({
    int page = 1,
    int perPage = 15,
    int? warehouseId,
    String? status,
  }) async {
    try {
      print('üîµ –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö...');
      
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
        'status': status ?? 'in_stock', // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      };
      
      if (warehouseId != null) {
        queryParams['warehouse_id'] = warehouseId;
      }
      
      print('üîµ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ /products: $queryParams');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /products —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in_stock
      final response = await _dio.get('/products', queryParameters: queryParams);
      
      print('üì• –û—Ç–≤–µ—Ç API —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ): ${response.data}');
      
      return InventoryStocksResponse.fromJson(response.data);
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<List<InventoryProducerModel>> getProducers() async {
    try {
      print('üîµ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π...');
      
      final response = await _dio.get('/producers');
      
      print('üì• –û—Ç–≤–µ—Ç API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: ${response.data}');
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (response.data is List) {
        return (response.data as List)
            .map((e) => InventoryProducerModel.fromJson(e))
            .toList();
      }
      
      throw const ServerException('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π');
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<InventoryWarehousesResponse> getWarehouses({
    int page = 1,
    int perPage = 50,
  }) async {
    try {
      print('üîµ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...');
      
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      
      final response = await _dio.get('/warehouses', queryParameters: queryParams);
      
      print('üì• –û—Ç–≤–µ—Ç API —Å–∫–ª–∞–¥–æ–≤: ${response.data}');
      
      return InventoryWarehousesResponse.fromJson(response.data);
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<InventoryCompaniesResponse> getCompanies({
    int page = 1,
    int perPage = 50,
  }) async {
    try {
      print('üîµ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...');
      
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      
      final response = await _dio.get('/companies', queryParameters: queryParams);
      
      print('üì• –û—Ç–≤–µ—Ç API –∫–æ–º–ø–∞–Ω–∏–π: ${response.data}');
      
      return InventoryCompaniesResponse.fromJson(response.data);
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π: $e');
      throw _handleError(e);
    }
  }

  AppException _handleError(dynamic error) {
    if (error is DioException) {
      switch (error.type) {
        case DioExceptionType.connectionTimeout:
        case DioExceptionType.sendTimeout:
        case DioExceptionType.receiveTimeout:
          return const NetworkException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
        case DioExceptionType.badResponse:
          final statusCode = error.response?.statusCode;
          final message = error.response?.data?['message'] ?? '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
          
          if (statusCode == 401) {
            return const AuthException('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
          } else if (statusCode == 403) {
            return const AuthException('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          } else if (statusCode == 404) {
            return const ServerException('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
          } else {
            return ServerException('$statusCode: $message', statusCode);
          }
        case DioExceptionType.cancel:
          return const NetworkException('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
        default:
          return const NetworkException('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      }
    }
    
    return UnknownException(error.toString());
  }
}

@riverpod
InventoryStocksRemoteDataSource inventoryStocksRemoteDataSource(InventoryStocksRemoteDataSourceRef ref) {
  final dio = ref.read(dioClientProvider);
  return InventoryStocksRemoteDataSourceImpl(dio);
}
