import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/core/error/error_handler.dart';
import 'package:sum_warehouse/shared/models/stock_model.dart';

part 'inventory_remote_datasource.g.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è remote data source –æ—Å—Ç–∞—Ç–∫–æ–≤ (–Ω–æ–≤–æ–µ API)
abstract class InventoryRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–æ–≤—ã–π API /stocks)
  Future<List<StockModel>> getStocks({
    int? warehouseId,
    bool? lowStock,
    int page = 1,
    int perPage = 15,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ ID
  Future<StockModel> getStockById(String stockId);
  
  /// –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û –≤ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  /// TODO: –î–æ–±–∞–≤–∏—Ç—å endpoint /stock-movements –≤ OpenAPI –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  Future<void> createStockMovement({
    required String stockId,
    required String type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  });
  
  /// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û –≤ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  /// TODO: –î–æ–±–∞–≤–∏—Ç—å endpoint /stocks/{id}/adjust –≤ OpenAPI –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  Future<void> adjustStock({
    required String stockId,
    required double newQuantity,
    required String reason,
    String? notes,
  });
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –æ—Å—Ç–∞—Ç–∫–æ–≤
@riverpod
InventoryRemoteDataSource inventoryRemoteDataSource(InventoryRemoteDataSourceRef ref) {
  return InventoryRemoteDataSourceImpl(ref.read(dioClientProvider));
}

class InventoryRemoteDataSourceImpl implements InventoryRemoteDataSource {
  final Dio _dio;

  InventoryRemoteDataSourceImpl(this._dio);

  @override
  Future<List<StockModel>> getStocks({
    int? warehouseId,
    bool? lowStock,
    int page = 1,
    int perPage = 15,
  }) async {
    try {
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      
      if (warehouseId != null) {
        queryParams['warehouse_id'] = warehouseId;
      }
      
      if (lowStock != null) {
        queryParams['low_stock'] = lowStock;
      }
      
      print('üîµ –ó–∞–ø—Ä–æ—Å –∫ /stocks —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams');
      final response = await _dio.get('/stocks', queryParameters: queryParams);
      
      print('üì• Stocks API response: ${response.data}');
      
      if (response.data is Map<String, dynamic>) {
        final data = response.data as Map<String, dynamic>;
        final List<dynamic> stocksList = data['data'] ?? [];
        
        return stocksList.map((json) => StockModel.fromJson(json as Map<String, dynamic>)).toList();
      } else if (response.data is List) {
        final List<dynamic> stocksList = response.data as List;
        return stocksList.map((json) => StockModel.fromJson(json as Map<String, dynamic>)).toList();
      }
      
      return [];
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /stocks –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw ErrorHandler.handleError(e);
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ stocks: $e');
      throw ErrorHandler.handleError(e);
    }
  }

  @override
  Future<StockModel> getStockById(String stockId) async {
    try {
      print('üîµ –ó–∞–ø—Ä–æ—Å –∫ /stocks/$stockId');
      final response = await _dio.get('/stocks/$stockId');
      
      print('üì• Stock by ID response: ${response.data}');
      
      return StockModel.fromJson(response.data as Map<String, dynamic>);
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /stocks/$stockId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw ErrorHandler.handleError(e);
    }
  }

  @override
  Future<void> createStockMovement({
    required String stockId,
    required String type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  }) async {
    // TODO: Endpoint /stock-movements is not defined in OpenAPI specification
    // This functionality needs to be added to the API before it can be used
    throw Exception('–§—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    
    /*
    // Original implementation that uses non-existent endpoint:
    try {
      final body = {
        'stock_id': stockId,
        'type': type,
        'quantity': quantity,
        if (reason != null) 'reason': reason,
        if (documentNumber != null) 'document_number': documentNumber,
        if (notes != null) 'notes': notes,
      };
      
      print('üîµ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è: $body');
      await _dio.post('/stock-movements', data: body);
      
      print('‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /stock-movements –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      throw Exception('API –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
    }
    */
  }

  @override
  Future<void> adjustStock({
    required String stockId,
    required double newQuantity,
    required String reason,
    String? notes,
  }) async {
    // TODO: Endpoint /stocks/{id}/adjust is not defined in OpenAPI specification
    // This functionality needs to be added to the API before it can be used
    throw Exception('–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    
    /*
    // Original implementation that uses non-existent endpoint:
    try {
      final body = {
        'new_quantity': newQuantity,
        'reason': reason,
        if (notes != null) 'notes': notes,
      };
      
      print('üîµ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: stock=$stockId, body=$body');
      await _dio.patch('/stocks/$stockId/adjust', data: body);
      
      print('‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /stocks/$stockId/adjust –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      throw Exception('API –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
    }
    */
  }

}


