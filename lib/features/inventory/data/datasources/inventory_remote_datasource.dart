import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/shared/models/api_response_model.dart';
import 'package:sum_warehouse/shared/models/stock_model.dart';
import 'package:sum_warehouse/features/inventory/domain/entities/inventory_entity.dart';
import 'package:sum_warehouse/features/inventory/domain/entities/inventory_entity.dart' as entity;

part 'inventory_remote_datasource.g.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è remote data source –æ—Å—Ç–∞—Ç–∫–æ–≤
abstract class InventoryRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
  Future<List<InventoryEntity>> getInventoryByWarehouse(int warehouseId);
  
  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  Future<InventoryEntity> getInventoryByProduct(int productId);
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  Future<List<InventoryEntity>> getAllInventory({
    int? warehouseId,
    entity.StockStatus? status,
    bool? needsRestock,
    String? search,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–Ω–æ–≤–æ–µ API)
  Future<List<StockModel>> getStocks();
  
  /// –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<void> createStockMovement({
    required int productId,
    required int warehouseId,
    required MovementType type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  });
  
  /// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
  Future<void> adjustStock({
    required int productId,
    required int warehouseId,
    required double newQuantity,
    required String reason,
    String? notes,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π
  Future<List<StockMovementEntity>> getMovementHistory(int productId);
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  Future<List<InventoryEntity>> getInventoryList({
    int? warehouseId,
    String? status,
    bool? needsRestock,
    String? search,
  });
  
  /// –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
  Future<void> updateInventory(int inventoryId, double quantity);
  
  /// –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–æ inventory ID)
  Future<void> createStockMovementByInventory({
    required int inventoryId,
    required String type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  });
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –æ—Å—Ç–∞—Ç–∫–æ–≤
@riverpod
InventoryRemoteDataSource inventoryRemoteDataSource(InventoryRemoteDataSourceRef ref) {
  return InventoryRemoteDataSourceImpl(ref.read(dioClientProvider));
}

class InventoryRemoteDataSourceImpl implements InventoryRemoteDataSource {
  final Dio _dio;

  InventoryRemoteDataSourceImpl(this._dio);

  @override
  Future<List<InventoryEntity>> getInventoryByWarehouse(int warehouseId) async {
    try {
      final response = await _dio.get('/warehouses/$warehouseId/products');
      print('üü¢ Inventory API response for warehouse $warehouseId: ${response.data}');
      
      if (response.data is List) {
        return (response.data as List)
            .map((item) => _convertProductToInventory(item, warehouseId))
            .toList();
      }
      
      return [];
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /warehouses/$warehouseId/products –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      return _getMockInventoryForWarehouse(warehouseId);
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–∞: $e');
      return _getMockInventoryForWarehouse(warehouseId);
    }
  }

  @override
  Future<InventoryEntity> getInventoryByProduct(int productId) async {
    try {
      final response = await _dio.get('/products/$productId');
      print('üü¢ Product API response for $productId: ${response.data}');
      
      return _convertProductToInventory(response.data, 1); // Default warehouse
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /products/$productId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      throw Exception('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  @override
  Future<List<InventoryEntity>> getAllInventory({
    int? warehouseId,
    entity.StockStatus? status,
    bool? needsRestock,
    String? search,
  }) async {
    if (warehouseId != null) {
      return getInventoryByWarehouse(warehouseId);
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å–∫–ª–∞–¥, –ø–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
    try {
      final Map<String, dynamic> queryParams = {};
      if (search != null) queryParams['search'] = search;
      if (status != null) {
        switch (status) {
          case entity.StockStatus.inStock:
            queryParams['in_stock'] = true;
            break;
          case entity.StockStatus.lowStock:
            queryParams['low_stock'] = true;
            break;
          case entity.StockStatus.outOfStock:
            queryParams['in_stock'] = false;
            break;
        }
      }
      
      final response = await _dio.get('/products', queryParameters: queryParams);
      print('üü¢ Products API response: ${response.data}');
      
      if (response.data is Map && response.data['data'] is List) {
        return (response.data['data'] as List)
            .map((item) => _convertProductToInventory(item, item['warehouse_id'] ?? 1))
            .toList();
      }
      
      return [];
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /products –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}');
      return _getMockInventory();
    }
  }

  @override
  Future<void> createStockMovement({
    required int productId,
    required int warehouseId,
    required MovementType type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  }) async {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π
    print('üü° –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: product=$productId, type=$type, quantity=$quantity');
    await Future.delayed(const Duration(seconds: 1)); // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    throw Exception('API –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  }

  @override
  Future<void> adjustStock({
    required int productId,
    required int warehouseId,
    required double newQuantity,
    required String reason,
    String? notes,
  }) async {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    print('üü° –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: product=$productId, newQuantity=$newQuantity, reason=$reason');
    await Future.delayed(const Duration(seconds: 1)); // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    throw Exception('API –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  }

  @override
  Future<List<StockMovementEntity>> getMovementHistory(int productId) async {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π
    print('üü° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ $productId');
    await Future.delayed(const Duration(seconds: 1)); // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    return _getMockMovements(productId);
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å—Ç–∞—Ç–∫–∏
  InventoryEntity _convertProductToInventory(Map<String, dynamic> productData, int warehouseId) {
    final quantity = _parseDouble(productData['quantity']) ?? 0.0;
    final reservedQuantity = 0.0; // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
    
    return InventoryEntity(
      id: productData['id'] ?? 0,
      warehouseId: warehouseId,
      productId: productData['id'] ?? 0,
      quantity: quantity,
      reservedQuantity: reservedQuantity,
      availableQuantity: quantity - reservedQuantity,
      minStockLevel: 10.0, // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
      maxStockLevel: 100.0, // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
      lastMovementDate: _parseDateTime(productData['updated_at']),
      lastUpdated: _parseDateTime(productData['updated_at']),
      product: ProductEntity(
        id: productData['id'] ?? 0,
        name: productData['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
        productTemplateId: productData['product_template_id'] ?? 0,
        unit: productData['unit'] ?? '—à—Ç',
        producer: productData['producer'],
      ),
      warehouse: WarehouseEntity(
        id: warehouseId,
        name: '–°–∫–ª–∞–¥ ‚Ññ$warehouseId',
        address: '–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞',
        companyId: 1,
      ),
    );
  }

  /// –ü–∞—Ä—Å–µ—Ä double –∏–∑ API
  double? _parseDouble(dynamic value) {
    if (value == null) return null;
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) return double.tryParse(value);
    return null;
  }

  /// –ü–∞—Ä—Å–µ—Ä DateTime –∏–∑ API
  DateTime? _parseDateTime(dynamic value) {
    if (value == null) return null;
    if (value is String) return DateTime.tryParse(value);
    return null;
  }

  /// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–∞
  List<InventoryEntity> _getMockInventoryForWarehouse(int warehouseId) {
    return _getMockInventory().where((item) => item.warehouseId == warehouseId).toList();
  }

  /// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
  List<InventoryEntity> _getMockInventory() {
    return [
      const InventoryEntity(
        id: 1,
        warehouseId: 1,
        productId: 1,
        quantity: 150,
        reservedQuantity: 20,
        availableQuantity: 130,
        minStockLevel: 50,
        maxStockLevel: 200,
        product: ProductEntity(
          id: 1,
          name: '–ö–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π',
          productTemplateId: 1,
          unit: '—à—Ç',
          producer: '–û–û–û "–°—Ç—Ä–æ–π–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"',
        ),
        warehouse: WarehouseEntity(
          id: 1,
          name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
          address: '—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 1',
          companyId: 1,
        ),
      ),
      const InventoryEntity(
        id: 2,
        warehouseId: 1,
        productId: 2,
        quantity: 8,
        reservedQuantity: 2,
        availableQuantity: 6,
        minStockLevel: 10,
        maxStockLevel: 50,
        product: ProductEntity(
          id: 2,
          name: '–¶–µ–º–µ–Ω—Ç –ú400',
          productTemplateId: 2,
          unit: '–º–µ—à–æ–∫',
          producer: '–¶–µ–º–µ–Ω—Ç–Ω—ã–π –∑–∞–≤–æ–¥',
        ),
        warehouse: WarehouseEntity(
          id: 1,
          name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
          address: '—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 1',
          companyId: 1,
        ),
      ),
      const InventoryEntity(
        id: 3,
        warehouseId: 2,
        productId: 3,
        quantity: 0,
        reservedQuantity: 0,
        availableQuantity: 0,
        minStockLevel: 5,
        maxStockLevel: 25,
        product: ProductEntity(
          id: 3,
          name: '–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π',
          productTemplateId: 3,
          unit: '–º¬≥',
          producer: '–ö–∞—Ä—å–µ—Ä "–†–µ—á–Ω–æ–π"',
        ),
        warehouse: WarehouseEntity(
          id: 2,
          name: '–°–∫–ª–∞–¥ ‚Ññ2',
          address: '—É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 15',
          companyId: 1,
        ),
      ),
    ];
  }

  @override
  Future<List<InventoryEntity>> getInventoryList({
    int? warehouseId,
    String? status,
    bool? needsRestock,
    String? search,
  }) async {
    return getAllInventory(
      warehouseId: warehouseId,
      status: status != null ? entity.StockStatus.values.firstWhere(
        (s) => s.code == status,
        orElse: () => entity.StockStatus.inStock,
      ) : null,
      needsRestock: needsRestock,
      search: search,
    );
  }

  @override
  Future<void> updateInventory(int inventoryId, double quantity) async {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    print('üü° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: inventory=$inventoryId, quantity=$quantity');
    await Future.delayed(const Duration(seconds: 1)); // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    throw Exception('API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  }

  @override
  Future<void> createStockMovementByInventory({
    required int inventoryId,
    required String type,
    required double quantity,
    String? reason,
    String? documentNumber,
    String? notes,
  }) async {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π
    print('üü° –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: inventory=$inventoryId, type=$type, quantity=$quantity');
    await Future.delayed(const Duration(seconds: 1)); // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    throw Exception('API –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  }

  /// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏–π
  List<StockMovementEntity> _getMockMovements(int productId) {
    return [
      StockMovementEntity(
        id: 1,
        inventoryId: productId,
        userId: 1,
        type: MovementType.incoming,
        quantity: 100,
        previousQuantity: 50,
        newQuantity: 150,
        reason: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        documentNumber: '–ü–†-001',
        notes: '–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        createdAt: DateTime.now().subtract(const Duration(days: 7)),
        user: const UserEntity(
          id: 1,
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          email: 'ivan@company.com',
        ),
      ),
      StockMovementEntity(
        id: 2,
        inventoryId: productId,
        userId: 2,
        type: MovementType.outgoing,
        quantity: -20,
        previousQuantity: 150,
        newQuantity: 130,
        reason: '–ü—Ä–æ–¥–∞–∂–∞',
        documentNumber: '–†–ê–°-002',
        notes: '–ü—Ä–æ–¥–∞–∂–∞ –∫–ª–∏–µ–Ω—Ç—É',
        createdAt: DateTime.now().subtract(const Duration(days: 3)),
        user: const UserEntity(
          id: 2,
          name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
          email: 'maria@company.com',
        ),
      ),
    ];
  }

  @override
  Future<List<StockModel>> getStocks() async {
    try {
      final response = await _dio.get('/stocks');
      
      if (response.data is Map<String, dynamic>) {
        final data = response.data as Map<String, dynamic>;
        final List<dynamic> stocksList = data['data'] ?? [];
        
        return stocksList.map((json) => StockModel.fromJson(json as Map<String, dynamic>)).toList();
      } else if (response.data is List) {
        final List<dynamic> stocksList = response.data as List;
        return stocksList.map((json) => StockModel.fromJson(json as Map<String, dynamic>)).toList();
      }
      
      return [];
    } catch (e) {
      print('Error fetching stocks: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
      return _getMockStocks();
    }
  }

  /// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ 
  List<StockModel> _getMockStocks() {
    return [
      StockModel(
        id: '1',
        productTemplateId: 23,
        warehouseId: 12,
        producer: '–≤—ã—Ñ–∞—ã–≤–∞',
        name: '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã: 55, 55, 55, –ï–ª—å',
        availableQuantity: 14.0,
        availableVolume: 2329.25,
        itemsCount: 1,
        firstArrival: DateTime.now().subtract(const Duration(days: 10)),
        lastArrival: DateTime.now().subtract(const Duration(days: 2)),
        template: null,
        warehouse: null,
      ),
      StockModel(
        id: '2',
        productTemplateId: 23,
        warehouseId: 12,
        producer: '–≥–∞–ª–∞–ª–∞',
        name: '–∞—Ä–º–∞—Ç—É—Ä–∞: 11, 22',
        availableQuantity: 22.0,
        availableVolume: 53.24,
        itemsCount: 1,
        firstArrival: DateTime.now().subtract(const Duration(days: 5)),
        lastArrival: DateTime.now().subtract(const Duration(days: 1)),
        template: null,
        warehouse: null,
      ),
      StockModel(
        id: '3',
        productTemplateId: 23,
        warehouseId: 12,
        producer: '–õ—é–∫—Å',
        name: '–∞—Ä–º–∞—Ç—É—Ä–∞: 11, 1',
        availableQuantity: 13.0,
        availableVolume: 1.43,
        itemsCount: 1,
        firstArrival: DateTime.now().subtract(const Duration(days: 7)),
        lastArrival: DateTime.now().subtract(const Duration(days: 7)),
        template: null,
        warehouse: null,
      ),
      StockModel(
        id: '4',
        productTemplateId: 24,
        warehouseId: 12,
        producer: '–°—É–ø–µ—Ä',
        name: '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã: 22, 22, 22, –ï–ª—å',
        availableQuantity: 10.0,
        availableVolume: 106.48,
        itemsCount: 1,
        firstArrival: DateTime.now().subtract(const Duration(days: 3)),
        lastArrival: DateTime.now().subtract(const Duration(days: 3)),
        template: null,
        warehouse: null,
      ),
      StockModel(
        id: '5',
        productTemplateId: 23,
        warehouseId: 12,
        producer: '–ü—É—à–∫–∏–Ω',
        name: '–∞—Ä–º–∞—Ç—É—Ä–∞: 22, 22',
        availableQuantity: 131.0,
        availableVolume: 687.28,
        itemsCount: 2,
        firstArrival: DateTime.now().subtract(const Duration(days: 15)),
        lastArrival: DateTime.now().subtract(const Duration(days: 1)),
        template: null,
        warehouse: null,
      ),
    ];
  }
}


