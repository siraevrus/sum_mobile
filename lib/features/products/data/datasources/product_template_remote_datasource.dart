import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/models/api_response_model.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/features/products/data/models/product_template_model.dart';

part 'product_template_remote_datasource.g.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è remote data source —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
abstract class ProductTemplateRemoteDataSource {
  Future<PaginatedResponse<ProductTemplateModel>> getProductTemplates({
    bool? isActive,
    String? search,
    String? sort,
    String? order,
    int? perPage,
    int? page,
  });

  Future<ApiResponse<ProductTemplateModel>> getProductTemplateById(int id);

  Future<ApiResponse<ProductTemplateModel>> createProductTemplate({
    required String name,
    required String unit,
    String? description,
    String? formula,
    bool? isActive,
  });

  Future<ApiResponse<ProductTemplateModel>> updateProductTemplate({
    required int id,
    String? name,
    String? unit,
    String? description,
    String? formula,
    bool? isActive,
  });

  Future<ApiResponse<void>> deleteProductTemplate(int id);

  Future<ApiResponse<void>> activateProductTemplate(int id);

  Future<ApiResponse<void>> deactivateProductTemplate(int id);

  Future<ApiResponse<List<String>>> getAvailableUnits();
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã —à–∞–±–ª–æ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
  Future<List<TemplateAttributeModel>> getTemplateAttributes(int templateId);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
class ProductTemplateRemoteDataSourceImpl implements ProductTemplateRemoteDataSource {
  final Dio _dio;

  ProductTemplateRemoteDataSourceImpl(this._dio);

  @override
  Future<PaginatedResponse<ProductTemplateModel>> getProductTemplates({
    bool? isActive,
    String? search,
    String? sort,
    String? order,
    int? perPage,
    int? page,
  }) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤');

      final queryParameters = <String, dynamic>{};
      if (isActive != null) queryParameters['is_active'] = isActive;
      if (search != null && search.isNotEmpty) queryParameters['search'] = search;
      if (sort != null) queryParameters['sort'] = sort;
      if (order != null) queryParameters['order'] = order;
      if (perPage != null) queryParameters['per_page'] = perPage;
      if (page != null) queryParameters['page'] = page;

      final response = await _dio.get(
        '/product-templates',
        queryParameters: queryParameters,
      );

      print('üü¢ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: ${response.statusCode}');

      return PaginatedResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductTemplateModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ DIO: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<ProductTemplateModel>> getProductTemplateById(int id) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ –ø–æ ID: $id');

      final response = await _dio.get('/product-templates/$id');

      print('üü¢ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–µ–Ω —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductTemplateModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<ProductTemplateModel>> createProductTemplate({
    required String name,
    required String unit,
    String? description,
    String? formula,
    bool? isActive,
  }) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞: $name');

      final data = <String, dynamic>{
        'name': name,
        'unit': unit,
      };
      if (description != null) data['description'] = description;
      if (formula != null) data['formula'] = formula;
      if (isActive != null) data['is_active'] = isActive;

      final response = await _dio.post(
        '/product-templates',
        data: data,
      );

      print('üü¢ ProductTemplateRemoteDataSource: –®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductTemplateModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<ProductTemplateModel>> updateProductTemplate({
    required int id,
    String? name,
    String? unit,
    String? description,
    String? formula,
    bool? isActive,
  }) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞: $id');

      final data = <String, dynamic>{};
      if (name != null) data['name'] = name;
      if (unit != null) data['unit'] = unit;
      if (description != null) data['description'] = description;
      if (formula != null) data['formula'] = formula;
      if (isActive != null) data['is_active'] = isActive;

      final response = await _dio.put(
        '/product-templates/$id',
        data: data,
      );

      print('üü¢ ProductTemplateRemoteDataSource: –®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductTemplateModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<void>> deleteProductTemplate(int id) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞: $id');

      final response = await _dio.delete('/product-templates/$id');

      print('üü¢ ProductTemplateRemoteDataSource: –®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ —É–¥–∞–ª–µ–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => json,
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<void>> activateProductTemplate(int id) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞: $id');

      final response = await _dio.post('/product-templates/$id/activate');

      print('üü¢ ProductTemplateRemoteDataSource: –®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => json,
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<void>> deactivateProductTemplate(int id) async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞: $id');

      final response = await _dio.post('/product-templates/$id/deactivate');

      print('üü¢ ProductTemplateRemoteDataSource: –®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => json,
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<List<String>>> getAvailableUnits() async {
    try {
      print('üîµ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è');

      final response = await _dio.get('/product-templates/units');

      print('üü¢ ProductTemplateRemoteDataSource: –ü–æ–ª—É—á–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => (json as List).cast<String>(),
      );
    } on DioException catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductTemplateRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ DioException
  Never _handleDioException(DioException e) {
    if (e.response?.statusCode == 400) {
      throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${e.response?.data['message'] ?? e.message}');
    } else if (e.response?.statusCode == 401) {
      throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    } else if (e.response?.statusCode == 403) {
      throw Exception('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    } else if (e.response?.statusCode == 404) {
      throw Exception('–®–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (e.response?.statusCode == 422) {
      throw Exception('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${e.response?.data['message'] ?? e.message}');
    } else if (e.response?.statusCode == 500) {
      throw Exception('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    } else {
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}');
    }
  }
  
  @override
  Future<List<TemplateAttributeModel>> getTemplateAttributes(int templateId) async {
    try {
      print('üîµ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —à–∞–±–ª–æ–Ω–∞ $templateId');
      final response = await _dio.get('/product-templates/$templateId/attributes');
      
      print('üîµ –û—Ç–≤–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞: ${response.data}');
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      final List<dynamic> data = response.data is List 
          ? response.data 
          : (response.data as Map<String, dynamic>)['data'] ?? [];
      
      print('üîµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${data.length}');
      
      final attributes = data.map((json) {
        final jsonMap = json as Map<String, dynamic>;
        print('üîµ –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç: $jsonMap');
        
        final attribute = TemplateAttributeModel.fromJson(jsonMap);
        print('üîµ –ê—Ç—Ä–∏–±—É—Ç ${attribute.name} (${attribute.type}): selectOptions=${attribute.selectOptions}, value=${attribute.value}, options=${attribute.options}');
        
        return attribute;
      }).toList();
      
      return attributes;
    } on DioException catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞: ${e.message}');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      return [];
    }
  }
}

/// Provider –¥–ª—è ProductTemplateRemoteDataSource
@riverpod
ProductTemplateRemoteDataSource productTemplateRemoteDataSource(
  ProductTemplateRemoteDataSourceRef ref,
) {
  final dio = ref.watch(dioClientProvider);
  return ProductTemplateRemoteDataSourceImpl(dio);
}
