import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/shared/models/product_model.dart';
import 'package:sum_warehouse/shared/models/popular_products_model.dart';
import 'package:sum_warehouse/shared/models/api_response_model.dart';

part 'products_api_datasource.g.dart';

/// API –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
abstract class ProductsApiDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  Future<PaginatedResponse<ProductModel>> getProducts([ProductFilters? filters]);
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
  Future<ProductModel> getProduct(int id);
  
  /// –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
  Future<ProductModel> createProduct(CreateProductRequest request);
  
  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
  Future<ProductModel> updateProduct(int id, UpdateProductRequest request);
  
  /// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
  Future<void> deleteProduct(int id);
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
  Future<ProductStats> getProductStats();
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  Future<List<PopularProductModel>> getPopularProducts();
  
  /// –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
  Future<List<ProductExportRow>> exportProducts([ProductFilters? filters]);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
class ProductsApiDataSourceImpl implements ProductsApiDataSource {
  final Dio _dio;
  
  ProductsApiDataSourceImpl(this._dio);

  @override
  Future<PaginatedResponse<ProductModel>> getProducts([ProductFilters? filters]) async {
    try {
      final queryParams = filters?.toQueryParams() ?? {'page': 1, 'per_page': 15};
      
      final response = await _dio.get('/products', queryParameters: queryParams);
      
      return PaginatedResponse<ProductModel>.fromJson(
        response.data,
        (json) => ProductModel.fromJson(json as Map<String, dynamic>),
      );
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<ProductModel> getProduct(int id) async {
    try {
      final response = await _dio.get('/products/$id');
      return ProductModel.fromJson(response.data);
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<ProductModel> createProduct(CreateProductRequest request) async {
    try {
      print('üîµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${request.toJson()}');
      final response = await _dio.post('/products', data: request.toJson());
      
      print('üîµ –û—Ç–≤–µ—Ç API —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${response.data}');
      
      // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      final responseData = response.data;
      if (responseData is Map<String, dynamic>) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å product (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
        if (responseData.containsKey('product') && responseData['product'] != null) {
          return ProductModel.fromJson(responseData['product'] as Map<String, dynamic>);
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å data
        else if (responseData.containsKey('data') && responseData['data'] != null) {
          return ProductModel.fromJson(responseData['data'] as Map<String, dynamic>);
        }
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
        else {
          return ProductModel.fromJson(responseData);
        }
      }
      
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<ProductModel> updateProduct(int id, UpdateProductRequest request) async {
    try {
      print('üîµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ $id: ${request.toJson()}');
      final response = await _dio.put('/products/$id', data: request.toJson());
      
      print('üîµ –û—Ç–≤–µ—Ç API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${response.data}');
      
      // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      final responseData = response.data;
      if (responseData is Map<String, dynamic>) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å product (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
        if (responseData.containsKey('product') && responseData['product'] != null) {
          return ProductModel.fromJson(responseData['product'] as Map<String, dynamic>);
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å data
        else if (responseData.containsKey('data') && responseData['data'] != null) {
          return ProductModel.fromJson(responseData['data'] as Map<String, dynamic>);
        }
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
        else {
          return ProductModel.fromJson(responseData);
        }
      }
      
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<void> deleteProduct(int id) async {
    try {
      await _dio.delete('/products/$id');
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<ProductStats> getProductStats() async {
    try {
      final response = await _dio.get('/products/stats');
      return ProductStats.fromJson(response.data);
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<List<PopularProductModel>> getPopularProducts() async {
    try {
      final response = await _dio.get('/products/popular');
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {success: true, data: [{id, total_sales, total_revenue}]}
      final responseData = response.data as Map<String, dynamic>;
      final productsData = responseData['data'] as List;
      
      return productsData
          .map((json) => PopularProductModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<List<ProductExportRow>> exportProducts([ProductFilters? filters]) async {
    try {
      final queryParams = filters?.toQueryParams() ?? {};
      
      final response = await _dio.get('/products/export', queryParameters: queryParams);
      
      final responseData = response.data as Map<String, dynamic>;
      final productsData = responseData['data'] as List;
      
      return productsData
          .map((json) => ProductExportRow.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      throw _handleError(e);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  Exception _handleError(dynamic error) {
    if (error is DioException) {
      switch (error.response?.statusCode) {
        case 401:
          return Exception('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        case 403:
          return Exception('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        case 404:
          return Exception('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        case 422:
          final errorData = error.response?.data;
          if (errorData != null) {
            try {
              final apiError = ApiErrorModel.fromJson(errorData);
              return Exception(apiError.message);
            } catch (_) {
              return Exception('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
          }
          return Exception('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        case 500:
          return Exception('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        default:
          return Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}');
      }
    }
    
    return Exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $error');
  }
}

/// Provider –¥–ª—è API –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@riverpod
ProductsApiDataSource productsApiDataSource(ProductsApiDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return ProductsApiDataSourceImpl(dio);
}
