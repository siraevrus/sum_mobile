import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/models/api_response_model.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/features/products/data/models/product_model.dart';

part 'product_remote_datasource.g.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è remote data source —Ç–æ–≤–∞—Ä–æ–≤
abstract class ProductRemoteDataSource {
  Future<LaravelPaginatedResponse<ProductModel>> getProducts({
    String? search,
    int? warehouseId,
    int? templateId,
    String? producer,
    bool? inStock,
    bool? lowStock,
    bool? active,
    int? perPage,
    int? page,
  });

  Future<ProductModel> getProductById(int id);

  Future<ApiResponse<ProductModel>> createProduct({
    required int productTemplateId,
    required int warehouseId,
    required String name,
    required double quantity,
    String? description,
    Map<String, dynamic>? attributes,
    String? producer,
    String? arrivalDate,
    bool? isActive,
  });

  Future<ApiResponse<ProductModel>> updateProduct({
    required int id,
    String? name,
    double? quantity,
    String? description,
    Map<String, dynamic>? attributes,
    String? producer,
    String? arrivalDate,
    bool? isActive,
  });

  Future<ApiResponse<void>> deleteProduct(int id);

  Future<ApiResponse<Map<String, dynamic>>> getProductStats();

  Future<ApiResponse<List<ProductModel>>> getPopularProducts();

  Future<ApiResponse<List<ProductModel>>> exportProducts({
    String? search,
    int? warehouseId,
    int? templateId,
    String? producer,
    bool? inStock,
    bool? lowStock,
    bool? active,
  });
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
class ProductRemoteDataSourceImpl implements ProductRemoteDataSource {
  final Dio _dio;

  ProductRemoteDataSourceImpl(this._dio);

  @override
  Future<LaravelPaginatedResponse<ProductModel>> getProducts({
    String? search,
    int? warehouseId,
    int? templateId,
    String? producer,
    bool? inStock,
    bool? lowStock,
    bool? active,
    int? perPage,
    int? page,
  }) async {
    try {
      print('üîµ ProductRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤');

      final queryParameters = <String, dynamic>{};
      if (search != null && search.isNotEmpty) queryParameters['search'] = search;
      if (warehouseId != null) queryParameters['warehouse_id'] = warehouseId;
      if (templateId != null) queryParameters['template_id'] = templateId;
      if (producer != null && producer.isNotEmpty) queryParameters['producer'] = producer;
      if (inStock != null) queryParameters['in_stock'] = inStock;
      if (lowStock != null) queryParameters['low_stock'] = lowStock;
      if (active != null) queryParameters['active'] = active;
      if (perPage != null) queryParameters['per_page'] = perPage;
      if (page != null) queryParameters['page'] = page;

      final response = await _dio.get(
        '/products',
        queryParameters: queryParameters,
      );

      print('üü¢ ProductRemoteDataSource: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: ${response.statusCode}');

      return LaravelPaginatedResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ DIO: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ProductModel> getProductById(int id) async {
    try {
      print('üîµ ProductRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID: $id');

      final response = await _dio.get('/products/$id');

      print('üü¢ ProductRemoteDataSource: –ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä');

      return ProductModel.fromJson(response.data as Map<String, dynamic>);
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<ProductModel>> createProduct({
    required int productTemplateId,
    required int warehouseId,
    required String name,
    required double quantity,
    String? description,
    Map<String, dynamic>? attributes,
    String? producer,
    String? arrivalDate,
    bool? isActive,
  }) async {
    try {
      print('üîµ ProductRemoteDataSource: –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä: $name');

      final data = <String, dynamic>{
        'product_template_id': productTemplateId,
        'warehouse_id': warehouseId,
        'name': name,
        'quantity': quantity,
      };
      if (description != null) data['description'] = description;
      if (attributes != null) data['attributes'] = attributes;
      if (producer != null) data['producer'] = producer;
      if (arrivalDate != null) data['arrival_date'] = arrivalDate;
      if (isActive != null) data['is_active'] = isActive;

      final response = await _dio.post(
        '/products',
        data: data,
      );

      print('üü¢ ProductRemoteDataSource: –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<ProductModel>> updateProduct({
    required int id,
    String? name,
    double? quantity,
    String? description,
    Map<String, dynamic>? attributes,
    String? producer,
    String? arrivalDate,
    bool? isActive,
  }) async {
    try {
      print('üîµ ProductRemoteDataSource: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä: $id');

      final data = <String, dynamic>{};
      if (name != null) data['name'] = name;
      if (quantity != null) data['quantity'] = quantity;
      if (description != null) data['description'] = description;
      if (attributes != null) data['attributes'] = attributes;
      if (producer != null) data['producer'] = producer;
      if (arrivalDate != null) data['arrival_date'] = arrivalDate;
      if (isActive != null) data['is_active'] = isActive;

      final response = await _dio.put(
        '/products/$id',
        data: data,
      );

      print('üü¢ ProductRemoteDataSource: –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => ProductModel.fromJson(json as Map<String, dynamic>),
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<void>> deleteProduct(int id) async {
    try {
      print('üîµ ProductRemoteDataSource: –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä: $id');

      final response = await _dio.delete('/products/$id');

      print('üü¢ ProductRemoteDataSource: –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => json,
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<Map<String, dynamic>>> getProductStats() async {
    try {
      print('üîµ ProductRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤');

      final response = await _dio.get('/products/stats');

      print('üü¢ ProductRemoteDataSource: –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => json as Map<String, dynamic>,
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<List<ProductModel>>> getPopularProducts() async {
    try {
      print('üîµ ProductRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã');

      final response = await _dio.get('/products/popular');

      print('üü¢ ProductRemoteDataSource: –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => (json as List)
            .map((item) => ProductModel.fromJson(item as Map<String, dynamic>))
            .toList(),
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  @override
  Future<ApiResponse<List<ProductModel>>> exportProducts({
    String? search,
    int? warehouseId,
    int? templateId,
    String? producer,
    bool? inStock,
    bool? lowStock,
    bool? active,
  }) async {
    try {
      print('üîµ ProductRemoteDataSource: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã');

      final queryParameters = <String, dynamic>{};
      if (search != null && search.isNotEmpty) queryParameters['search'] = search;
      if (warehouseId != null) queryParameters['warehouse_id'] = warehouseId;
      if (templateId != null) queryParameters['template_id'] = templateId;
      if (producer != null && producer.isNotEmpty) queryParameters['producer'] = producer;
      if (inStock != null) queryParameters['in_stock'] = inStock;
      if (lowStock != null) queryParameters['low_stock'] = lowStock;
      if (active != null) queryParameters['active'] = active;

      final response = await _dio.get(
        '/products/export',
        queryParameters: queryParameters,
      );

      print('üü¢ ProductRemoteDataSource: –¢–æ–≤–∞—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');

      return ApiResponse.fromJson(
        response.data as Map<String, dynamic>,
        (json) => (json as List)
            .map((item) => ProductModel.fromJson(item as Map<String, dynamic>))
            .toList(),
      );
    } on DioException catch (e) {
      print('üî¥ ProductRemoteDataSource: –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${e.response?.statusCode} - ${e.message}');
      _handleDioException(e);
    } catch (e) {
      print('üî¥ ProductRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ DioException
  Never _handleDioException(DioException e) {
    if (e.response?.statusCode == 400) {
      throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${e.response?.data['message'] ?? e.message}');
    } else if (e.response?.statusCode == 401) {
      throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    } else if (e.response?.statusCode == 403) {
      throw Exception('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    } else if (e.response?.statusCode == 404) {
      throw Exception('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (e.response?.statusCode == 422) {
      throw Exception('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${e.response?.data['message'] ?? e.message}');
    } else if (e.response?.statusCode == 500) {
      throw Exception('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    } else {
      throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}');
    }
  }
}

/// Provider –¥–ª—è ProductRemoteDataSource
@riverpod
ProductRemoteDataSource productRemoteDataSource(
  ProductRemoteDataSourceRef ref,
) {
  final dio = ref.watch(dioClientProvider);
  return ProductRemoteDataSourceImpl(dio);
}
