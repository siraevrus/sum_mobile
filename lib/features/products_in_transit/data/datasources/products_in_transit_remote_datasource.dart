import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/features/products_in_transit/data/models/product_in_transit_model.dart';
import 'package:sum_warehouse/shared/models/paginated_response.dart';

part 'products_in_transit_remote_datasource.g.dart';

@riverpod
ProductsInTransitRemoteDataSource productsInTransitRemoteDataSource(ProductsInTransitRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return ProductsInTransitRemoteDataSource(dio);
}

class ProductsInTransitRemoteDataSource {
  final Dio _dio;

  ProductsInTransitRemoteDataSource(this._dio);

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
  Future<ProductInTransitResponse> getProductsInTransit({
    int? page,
    int? perPage,
    String? status,
    String? search,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (page != null) queryParams['page'] = page;
      if (perPage != null) queryParams['per_page'] = perPage;
      if (status != null) queryParams['status'] = status;
      if (search != null) queryParams['search'] = search;

      print('üåê –ó–∞–ø—Ä–æ—Å –∫ API: /products-in-transit —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams');
      
      final response = await _dio.get(
        '/products-in-transit',
        queryParameters: queryParams.isNotEmpty ? queryParams : null,
      );

      print('üì° –û—Ç–≤–µ—Ç API: ${response.statusCode}');
      print('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${response.data}');

      if (response.data is Map<String, dynamic>) {
        final result = ProductInTransitResponse.fromJson(response.data as Map<String, dynamic>);
        print('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–≤–∞—Ä–æ–≤: ${result.data.length}');
        return result;
      }

      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    } on DioException catch (e) {
      if (e.response?.statusCode == 401) {
        throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      } else if (e.response?.statusCode == 403) {
        throw Exception('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø—É—Ç–∏');
      } else if (e.response?.statusCode == 404) {
        throw Exception('–¢–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: ${e.message}');
      }
    } catch (e) {
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ –ø–æ ID
  Future<ProductInTransitModel> getProductInTransitById(int id) async {
    try {
      final response = await _dio.get('/products-in-transit/$id');
      
      if (response.data is Map<String, dynamic>) {
        final data = response.data as Map<String, dynamic>;
        if (data.containsKey('data')) {
          return ProductInTransitModel.fromJson(data['data'] as Map<String, dynamic>);
        }
        return ProductInTransitModel.fromJson(data);
      }

      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    } on DioException catch (e) {
      if (e.response?.statusCode == 401) {
        throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      } else if (e.response?.statusCode == 403) {
        throw Exception('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–≤–∞—Ä—É –≤ –ø—É—Ç–∏');
      } else if (e.response?.statusCode == 404) {
        throw Exception('–¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${e.message}');
      }
    } catch (e) {
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø—É—Ç–∏
  Future<List<ProductInTransitModel>> createProductInTransit(CreateProductInTransitRequest request) async {
    try {
      final response = await _dio.post('/products-in-transit', data: request.toJson());
      if (response.data is Map<String, dynamic>) {
        final responseModel = ProductInTransitResponse.fromJson(response.data as Map<String, dynamic>);
        return responseModel.data;
      }
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏');
    } on DioException catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${e.message}');
    } catch (e) {
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
    }
  }

  /// –ü—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä (–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ received)
  Future<void> receiveProductInTransit(int productId, ReceiveProductInTransitRequest request) async {
    try {
      await _dio.post('/products-in-transit/$productId/receive', data: request.toJson());
    } on DioException catch (e) {
      if (e.response?.statusCode == 401) {
        throw Exception('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      } else if (e.response?.statusCode == 403) {
        throw Exception('–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏');
      } else if (e.response?.statusCode == 404) {
        throw Exception('–¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else if (e.response?.statusCode == 422) {
        throw Exception('–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ');
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${e.message}');
      }
    } catch (e) {
      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }
}
