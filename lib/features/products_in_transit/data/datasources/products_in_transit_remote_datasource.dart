import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/core/models/api_response_model.dart';
import 'package:sum_warehouse/features/products_in_transit/data/models/product_in_transit_model.dart';

part 'products_in_transit_remote_datasource.g.dart';

/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
abstract class ProductsInTransitRemoteDataSource {
  Future<PaginatedResponse<ProductInTransitModel>> getProducts([ProductInTransitFilters? filters]);
  Future<ProductInTransitModel> getProduct(int id);
  Future<ProductInTransitModel> createProduct(CreateProductInTransitRequest request);
  Future<ProductInTransitModel> updateProduct(int id, UpdateProductInTransitRequest request);
  Future<void> deleteProduct(int id);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
class ProductsInTransitRemoteDataSourceImpl implements ProductsInTransitRemoteDataSource {
  final Dio _dio;
  
  ProductsInTransitRemoteDataSourceImpl(this._dio);

  @override
  Future<PaginatedResponse<ProductInTransitModel>> getProducts([ProductInTransitFilters? filters]) async {
    try {
      final queryParams = filters?.toQueryParams() ?? {'page': 1, 'per_page': 15};
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å for_receipt –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–¢–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏"
      if (!queryParams.containsKey('status')) {
        queryParams['status'] = 'for_receipt';
      }
      
      // include –Ω–µ –Ω—É–∂–µ–Ω ‚Äî API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
      
      print('üîµ –ó–∞–ø—Ä–æ—Å –Ω–∞ /products (—Ç–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏) —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams');
      final response = await _dio.get('/products', queryParameters: queryParams);
      
      print('üîµ –û—Ç–≤–µ—Ç API /products (—Ç–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏): ${response.data.toString().substring(0, response.data.toString().length > 500 ? 500 : response.data.toString().length)}...');
      
      return PaginatedResponse<ProductInTransitModel>.fromJson(
        response.data,
        (json) {
          print('üîµ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $json');
          return ProductInTransitModel.fromJson(json as Map<String, dynamic>);
        },
      );
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –≤ getProducts (—Ç–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏): $e');
      throw _handleError(e);
    }
  }

  @override
  Future<ProductInTransitModel> getProduct(int id) async {
    try {
      final response = await _dio.get('/products/$id', queryParameters: {
        'include': 'template,warehouse,creator,producer'
      });
      return ProductInTransitModel.fromJson(response.data);
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<ProductInTransitModel> createProduct(CreateProductInTransitRequest request) async {
    try {
      print('üîµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${request.toJson()}');
      final response = await _dio.post('/products', data: request.toJson());
      
      print('üîµ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${response.data}');
      
      return ProductInTransitModel.fromJson(response.data['product']);
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<ProductInTransitModel> updateProduct(int id, UpdateProductInTransitRequest request) async {
    try {
      print('üîµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏ $id: ${request.toJson()}');
      final response = await _dio.put('/products/$id', data: request.toJson());
      
      print('üîµ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${response.data}');
      
      return ProductInTransitModel.fromJson(response.data['product']);
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<void> deleteProduct(int id) async {
    try {
      print('üîµ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏ $id');
      await _dio.delete('/products/$id');
      print('üîµ –¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ $id —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      throw _handleError(e);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  Exception _handleError(dynamic error) {
    if (error is DioException) {
      switch (error.type) {
        case DioExceptionType.connectionTimeout:
        case DioExceptionType.sendTimeout:
        case DioExceptionType.receiveTimeout:
          return Exception('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        case DioExceptionType.badResponse:
          final statusCode = error.response?.statusCode;
          final message = error.response?.data?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
          return Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ($statusCode): $message');
        case DioExceptionType.cancel:
          return Exception('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
        case DioExceptionType.unknown:
          return Exception('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}');
        default:
          return Exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}');
      }
    }
    return Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $error');
  }
}

/// Provider –¥–ª—è API –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
@riverpod
ProductsInTransitRemoteDataSource productsInTransitRemoteDataSource(ProductsInTransitRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return ProductsInTransitRemoteDataSourceImpl(dio);
}
