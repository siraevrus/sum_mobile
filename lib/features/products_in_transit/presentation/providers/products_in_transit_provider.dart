import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/features/products/data/datasources/products_api_datasource.dart';
import 'package:sum_warehouse/shared/models/product_model.dart';
import 'package:sum_warehouse/shared/models/api_response_model.dart';

part 'products_in_transit_provider.g.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
sealed class ProductsInTransitState {}

class ProductsInTransitLoading extends ProductsInTransitState {}

class ProductsInTransitLoaded extends ProductsInTransitState {
  final PaginatedResponse<ProductModel> products;
  final ProductFilters? filters;

  ProductsInTransitLoaded({
    required this.products,
    this.filters,
  });
}

class ProductsInTransitError extends ProductsInTransitState {
  final String message;

  ProductsInTransitError(this.message);
}

/// Provider –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏ (—Å—Ç–∞—Ç—É—Å in_stock)
@riverpod
class ProductsInTransit extends _$ProductsInTransit {
  @override
  ProductsInTransitState build() {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —è–≤–Ω–æ
    return ProductsInTransitLoading();
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
  Future<void> loadProductsInTransit([ProductFilters? filters]) async {
    try {
      state = ProductsInTransitLoading();
      
      print('üîµ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏...');
      
      final apiDataSource = ref.read(productsApiDataSourceProvider);
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
      final transitFilters = ProductFilters(
        status: 'in_stock', // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in_stock
        search: filters?.search,
        warehouseId: filters?.warehouseId,
        templateId: filters?.templateId,
        producer: filters?.producer,
        page: filters?.page ?? 1,
        perPage: filters?.perPage ?? 15,
      );
      
      print('üîµ –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: ${transitFilters.toQueryParams()}');
      
      final response = await apiDataSource.getProducts(transitFilters);
      
      print('üîµ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: ${response.data.length}');
      
      state = ProductsInTransitLoaded(
        products: response,
        filters: transitFilters,
      );
    } catch (e, stackTrace) {
      print('üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: $e');
      print('üî¥ Stack trace: $stackTrace');
      
      // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      String errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏';
      if (e.toString().contains('401')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
      } else if (e.toString().contains('404')) {
        errorMessage = 'API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.';
      } else if (e.toString().contains('500')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (e.toString().contains('SocketException')) {
        errorMessage = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      } else {
        errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.toString()}';
      }
      
      state = ProductsInTransitError(errorMessage);
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  Future<void> refresh() async {
    final currentState = state;
    final currentFilters = currentState is ProductsInTransitLoaded 
        ? currentState.filters 
        : null;
    await loadProductsInTransit(currentFilters);
  }

  /// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
  Future<void> searchProducts(String query) async {
    final filters = ProductFilters(
      search: query.isNotEmpty ? query : null,
      status: 'in_stock',
      page: 1,
    );
    await loadProductsInTransit(filters);
  }

  /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
  Future<void> filterProducts(ProductFilters filters) async {
    final transitFilters = filters.copyWith(status: 'in_stock');
    await loadProductsInTransit(transitFilters);
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏
  Future<ProductModel?> createProductInTransit(CreateProductRequest request) async {
    try {
      print('üîµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $request');
      print('üîµ calculated_volume –≤ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${request.calculatedVolume}');
      
      final apiDataSource = ref.read(productsApiDataSourceProvider);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ in_stock
      final transitRequest = request.copyWith(status: 'in_stock');
      
      final newProduct = await apiDataSource.createProduct(transitRequest);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      await refresh();
      
      return newProduct;
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏
  Future<ProductModel?> updateProductInTransit(int id, UpdateProductRequest request) async {
    try {
      print('üîµ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ —Å ID: $id');
      print('üîµ calculated_volume –≤ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: ${request.calculatedVolume}');
      final apiDataSource = ref.read(productsApiDataSourceProvider);
      final updatedProduct = await apiDataSource.updateProduct(id, request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
      final currentState = state;
      if (currentState is ProductsInTransitLoaded) {
        final updatedProducts = currentState.products.data.map((product) {
          return product.id == id ? updatedProduct : product;
        }).toList();
        
        state = ProductsInTransitLoaded(
          products: currentState.products.copyWith(data: updatedProducts),
          filters: currentState.filters,
        );
      }
      
      print('üîµ –¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return updatedProduct;
    } catch (e, stackTrace) {
      print('üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      print('üî¥ Stack trace: $stackTrace');
      throw e;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏
  Future<void> deleteProductInTransit(int id) async {
    try {
      print('üîµ –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ —Å ID: $id');
      final apiDataSource = ref.read(productsApiDataSourceProvider);
      await apiDataSource.deleteProduct(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ - —É–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
      final currentState = state;
      if (currentState is ProductsInTransitLoaded) {
        final filteredProducts = currentState.products.data.where((product) => product.id != id).toList();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π total –∏–∑ meta –∏–ª–∏ pagination
        final currentTotal = currentState.products.meta?.total ?? 
                            currentState.products.pagination?.total ?? 
                            filteredProducts.length;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º total
        final updatedMeta = currentState.products.meta?.copyWith(total: currentTotal - 1);
        final updatedPagination = currentState.products.pagination?.copyWith(total: currentTotal - 1);
        
        state = ProductsInTransitLoaded(
          products: currentState.products.copyWith(
            data: filteredProducts,
            meta: updatedMeta,
            pagination: updatedPagination,
          ),
          filters: currentState.filters,
        );
      }
      
      print('üîµ –¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e, stackTrace) {
      print('üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏: $e');
      print('üî¥ Stack trace: $stackTrace');
      throw e;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  Future<void> loadNextPage() async {
    final currentState = state;
    if (currentState is! ProductsInTransitLoaded) return;
    
    final currentFilters = currentState.filters;
    if (currentFilters == null) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    final currentPage = currentFilters.page;
    final totalPages = currentState.products.pagination?.lastPage ?? 
                       currentState.products.meta?.lastPage ?? 1;
    
    if (currentPage >= totalPages) return;
    
    try {
      final nextFilters = currentFilters.copyWith(page: currentPage + 1);
      await loadProductsInTransit(nextFilters);
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $e');
    }
  }
}
