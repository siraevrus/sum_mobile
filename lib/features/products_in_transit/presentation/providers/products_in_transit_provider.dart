import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/models/api_response_model.dart';
import 'package:sum_warehouse/features/products_in_transit/data/datasources/products_in_transit_remote_datasource.dart';
import 'package:sum_warehouse/features/products_in_transit/data/models/product_in_transit_model.dart';

part 'products_in_transit_provider.freezed.dart';
part 'products_in_transit_provider.g.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏
@freezed
class ProductsInTransitState with _$ProductsInTransitState {
  const factory ProductsInTransitState.loading() = ProductsInTransitLoading;
  const factory ProductsInTransitState.loaded({
    required PaginatedResponse<ProductInTransitModel> products,
    ProductInTransitFilters? filters,
  }) = ProductsInTransitLoaded;
  const factory ProductsInTransitState.error(String message) = ProductsInTransitError;
}

/// Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –ø—É—Ç–∏
@riverpod
class ProductsInTransit extends _$ProductsInTransit {
  @override
  ProductsInTransitState build() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    _loadProducts();
    return const ProductsInTransitState.loading();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  Future<void> loadProducts([ProductInTransitFilters? filters]) async {
    state = const ProductsInTransitState.loading();
    await _loadProducts(filters);
  }

  /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  Future<void> refresh() async {
    final currentFilters = state is ProductsInTransitLoaded 
        ? (state as ProductsInTransitLoaded).filters 
        : null;
    await loadProducts(currentFilters);
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  Future<void> loadNextPage() async {
    if (state is! ProductsInTransitLoaded) return;
    
    final currentState = state as ProductsInTransitLoaded;
    final currentPage = currentState.products.pagination?.currentPage ?? 1;
    final lastPage = currentState.products.pagination?.lastPage ?? 1;
    
    if (currentPage >= lastPage) return;
    
    try {
      final nextFilters = currentState.filters?.copyWith(
        page: currentPage + 1,
      ) ?? ProductInTransitFilters(page: currentPage + 1);
      
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      final nextPageResponse = await apiDataSource.getProducts(nextFilters);
      
      final currentProducts = currentState.products.data;
      final newProducts = nextPageResponse.data;
      
      final updatedProducts = PaginatedResponse<ProductInTransitModel>(
        data: [...currentProducts, ...newProducts],
        success: nextPageResponse.success,
        pagination: nextPageResponse.pagination,
      );
      
      state = ProductsInTransitState.loaded(
        products: updatedProducts,
        filters: nextFilters,
      );
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $e');
    }
  }

  /// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> searchProducts(String query) async {
    final filters = ProductInTransitFilters(
      search: query.isNotEmpty ? query : null,
      page: 1,
    );
    await loadProducts(filters);
  }

  /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> filterProducts(ProductInTransitFilters filters) async {
    await loadProducts(filters);
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<ProductInTransitModel> createProduct(CreateProductInTransitRequest request) async {
    try {
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      final newProduct = await apiDataSource.createProduct(request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
      
      return newProduct;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  Future<List<ProductInTransitModel>> createMultipleProducts(CreateMultipleProductsInTransitRequest request) async {
    try {
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      final newProducts = await apiDataSource.createMultipleProducts(request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
      
      return newProducts;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: $e');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<ProductInTransitModel> updateProduct(int id, UpdateProductInTransitRequest request) async {
    try {
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      final updatedProduct = await apiDataSource.updateProduct(id, request);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
      
      return updatedProduct;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  Future<void> deleteProduct(int id) async {
    try {
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      await apiDataSource.deleteProduct(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      await refresh();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: $e');
    }
  }

  /// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  Future<void> _loadProducts([ProductInTransitFilters? filters]) async {
    try {
      final apiDataSource = ref.read(productsInTransitRemoteDataSourceProvider);
      final response = await apiDataSource.getProducts(filters);
      
      state = ProductsInTransitState.loaded(
        products: response,
        filters: filters,
      );
    } catch (e, stackTrace) {
      print('üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: $e');
      print('üî¥ Stack trace: $stackTrace');
      state = ProductsInTransitState.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—É—Ç–∏: $e');
    }
  }
}

/// Provider –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏
@riverpod
Future<ProductInTransitModel> productInTransit(ProductInTransitRef ref, int productId) async {
  final apiDataSource = ref.watch(productsInTransitRemoteDataSourceProvider);
  return await apiDataSource.getProduct(productId);
}
