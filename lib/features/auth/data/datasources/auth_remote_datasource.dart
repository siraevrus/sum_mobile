import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/features/auth/data/models/user_model.dart';
import 'package:sum_warehouse/shared/models/api_response_model.dart';

part 'auth_remote_datasource.g.dart';

/// Remote data source –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
abstract class AuthRemoteDataSource {
  /// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<AuthResponseModel> login({
    required String email,
    required String password,
  });
  
  /// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout();
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserModel> getCurrentUser();
  
  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  Future<UserModel> updateProfile({
    String? name,
    String? username,
    String? email,
    String? phone,
    String? currentPassword,
    String? newPassword,
  });
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source
class AuthRemoteDataSourceImpl implements AuthRemoteDataSource {
  final Dio _dio;
  
  AuthRemoteDataSourceImpl(this._dio);
  
  @override
  Future<AuthResponseModel> login({
    required String email,
    required String password,
  }) async {
    try {
      print('üîµ AuthRemoteDataSource: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞ –¥–ª—è $email');
      
      final response = await _dio.post(
        '/auth/login',
        data: LoginRequestModel(
          email: email,
          password: password,
        ).toJson(),
      );
      
      print('üü¢ AuthRemoteDataSource: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: ${response.statusCode}');
      
      return AuthResponseModel.fromJson(response.data as Map<String, dynamic>);
    } on DioException catch (e) {
      print('üî¥ AuthRemoteDataSource: –û—à–∏–±–∫–∞ DIO: ${e.response?.statusCode} - ${e.message}');
      
      if (e.response?.statusCode == 401) {
        final errorMessage = e.response?.data['message'] ?? '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
        throw AuthException(errorMessage);
      }
      
      if (e.response?.statusCode == 422) {
        final errorData = e.response?.data;
        if (errorData != null) {
          final apiError = ApiErrorModel.fromJson(errorData);
          throw ValidationException(
            apiError.message,
            apiError.errors ?? {},
          );
        }
      }
      
      throw NetworkException(
        '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}',
      );
    } catch (e) {
      print('üî¥ AuthRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      throw NetworkException('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }
  
  @override
  Future<void> logout() async {
    try {
      print('üîµ AuthRemoteDataSource: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å logout');
      
      await _dio.post('/auth/logout');
      
      print('üü¢ AuthRemoteDataSource: Logout —É—Å–ø–µ—à–µ–Ω');
    } on DioException catch (e) {
      print('üî¥ AuthRemoteDataSource: –û—à–∏–±–∫–∞ logout: ${e.message}');
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è logout, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å
    } catch (e) {
      print('üî¥ AuthRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ logout: $e');
    }
  }
  
  @override
  Future<UserModel> getCurrentUser() async {
    try {
      print('üîµ AuthRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      final response = await _dio.get('/auth/me');
      
      print('üü¢ AuthRemoteDataSource: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      return UserModel.fromJson(response.data as Map<String, dynamic>);
    } on DioException catch (e) {
      print('üî¥ AuthRemoteDataSource: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${e.response?.statusCode} - ${e.message}');
      
      if (e.response?.statusCode == 401) {
        throw AuthException('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      }
      
      throw NetworkException('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${e.message}');
    } catch (e) {
      print('üî¥ AuthRemoteDataSource: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      throw NetworkException('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }
  
  @override
  Future<UserModel> updateProfile({
    String? name,
    String? username,  
    String? email,
    String? phone,
    String? currentPassword,
    String? newPassword,
  }) async {
    try {
      final request = UpdateProfileRequest(
        name: name,
        username: username,
        email: email,
        phone: phone,
        currentPassword: currentPassword,
        newPassword: newPassword,
        passwordConfirmation: newPassword,
      );
      
      final response = await _dio.put('/auth/profile', data: request.toJson());
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å message –∏ user
      final responseData = response.data as Map<String, dynamic>;
      return UserModel.fromJson(responseData['user'] as Map<String, dynamic>);
    } on DioException catch (e) {
      if (e.response?.statusCode == 422) {
        final errorData = e.response?.data;
        if (errorData != null) {
          final apiError = ApiErrorModel.fromJson(errorData);
          throw ValidationException(
            apiError.message,
            apiError.errors ?? {},
          );
        }
      }
      throw NetworkException('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${e.message}');
    }
  }
}

/// Provider –¥–ª—è remote data source
@riverpod
AuthRemoteDataSource authRemoteDataSource(AuthRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return AuthRemoteDataSourceImpl(dio);
}

/// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class AuthException implements Exception {
  final String message;
  const AuthException(this.message);
  
  @override
  String toString() => 'AuthException: $message';
}

class NetworkException implements Exception {
  final String message;
  const NetworkException(this.message);
  
  @override
  String toString() => 'NetworkException: $message';
}

class ValidationException implements Exception {
  final String message;
  final Map<String, List<String>> errors;
  const ValidationException(this.message, this.errors);
  
  @override
  String toString() => 'ValidationException: $message';
}


