import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:sum_warehouse/core/theme/app_colors.dart';
import 'package:sum_warehouse/features/auth/presentation/providers/auth_provider.dart';
import 'package:sum_warehouse/features/auth/domain/entities/user_entity.dart';

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ —Ü–∏–∫–ª–æ–≤
class SimpleSplashPage extends ConsumerStatefulWidget {
  const SimpleSplashPage({super.key});

  @override
  ConsumerState<SimpleSplashPage> createState() => _SimpleSplashPageState();
}

class _SimpleSplashPageState extends ConsumerState<SimpleSplashPage> {
  bool _initialized = false;
  
  @override
  void initState() {
    super.initState();
    _initialize();
  }
  
  void _initialize() async {
    if (_initialized) return;
    _initialized = true;
    
    print('üöÄ SimpleSplashPage: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞ (Mounted: $mounted)');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    final currentState = ref.read(authProvider);
    print('üöÄ SimpleSplashPage: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState.runtimeType}');
    
    // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ  
    if (currentState.maybeWhen(
      authenticated: (user, token) => true, 
      loading: () => true,
      orElse: () => false
    )) {
      print('üöÄ SimpleSplashPage: –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
      return;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ splash screen
    await Future.delayed(const Duration(milliseconds: 800));
    
    if (!mounted) {
      print('üöÄ SimpleSplashPage: –í–∏–¥–∂–µ—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
      return;
    }
    
    print('üöÄ SimpleSplashPage: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    try {
      ref.read(authProvider.notifier).checkAuthStatus();
    } catch (e) {
      print('üî¥ SimpleSplashPage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primary,
      body: Consumer(
        builder: (context, ref, child) {
          final authState = ref.watch(authProvider);
          print('üé® SplashPage: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${authState.runtimeType}');
          
          // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          authState.maybeWhen(
            authenticated: (user, token) {
              print('üé® SplashPage: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ–∫—Ü–∏—é –ø–æ —Ä–æ–ª–∏');
              WidgetsBinding.instance.addPostFrameCallback((_) {
                if (!context.mounted) return;
                final target = user.role == UserRole.admin ? '/dashboard' : '/inventory';
                print('üöÄ SplashPage: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ $target');
                context.go(target);
              });
            },
            unauthenticated: () {
              print('üé® SplashPage: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
              WidgetsBinding.instance.addPostFrameCallback((_) {
                if (context.mounted) {
                  print('üöÄ SplashPage: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /login');
                  context.go('/login');
                }
              });
            },
            orElse: () {},
          );
          
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // –õ–æ–≥–æ—Ç–∏–ø
                Container(
                  width: 120,
                  height: 120,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(24),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.2),
                        blurRadius: 20,
                        offset: const Offset(0, 8),
                      ),
                    ],
                  ),
                  child: Icon(
                    Icons.warehouse,
                    size: 64,
                    color: AppColors.primary,
                  ),
                ),
                const SizedBox(height: 32),
                
                // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const Text(
                  'Sum Warehouse',
                  style: TextStyle(
                    fontSize: 36,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                    letterSpacing: 1.2,
                  ),
                ),
                const SizedBox(height: 8),
                
                // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                const Text(
                  '–°–∏—Å—Ç–µ–º–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á–µ—Ç–∞',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                    fontWeight: FontWeight.w300,
                  ),
                ),
                const SizedBox(height: 60),
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
                authState.maybeWhen(
                  initial: () => Column(
                    children: const [
                      SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                      SizedBox(height: 16),
                      Text(
                        '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
                        style: TextStyle(color: Colors.white70, fontSize: 14),
                      ),
                    ],
                  ),
                  loading: () => Column(
                    children: const [
                      SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                      SizedBox(height: 16),
                      Text(
                        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...',
                        style: TextStyle(color: Colors.white70, fontSize: 14),
                      ),
                    ],
                  ),
                  authenticated: (user, token) => Column(
                    children: [
                      const Icon(Icons.check_circle, color: Colors.white, size: 32),
                      const SizedBox(height: 16),
                      Text(
                        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!',
                        style: const TextStyle(color: Colors.white, fontSize: 16),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                  unauthenticated: () => Column(
                    children: const [
                      Icon(Icons.login, color: Colors.white, size: 32),
                      SizedBox(height: 16),
                      Text(
                        '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...',
                        style: TextStyle(color: Colors.white70, fontSize: 14),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                  error: (message) => Column(
                    children: [
                      const Icon(Icons.error, color: Colors.red, size: 32),
                      const SizedBox(height: 16),
                      Text(
                        '–û—à–∏–±–∫–∞: $message',
                        style: const TextStyle(color: Colors.white70, fontSize: 14),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                  orElse: () => Column(
                    children: const [
                      SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                      SizedBox(height: 16),
                      Text(
                        '–ó–∞–≥—Ä—É–∑–∫–∞...',
                        style: TextStyle(color: Colors.white70, fontSize: 14),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
