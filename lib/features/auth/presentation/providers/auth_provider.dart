import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/features/auth/data/datasources/auth_local_datasource.dart';
import 'package:sum_warehouse/features/auth/data/repositories/auth_repository_impl.dart';
import 'package:sum_warehouse/features/auth/data/models/user_model.dart';
import 'package:sum_warehouse/features/auth/domain/entities/user_entity.dart';
import 'package:sum_warehouse/features/auth/domain/usecases/login_usecase.dart';

part 'auth_provider.g.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@riverpod
class Auth extends _$Auth {
  bool _isProcessing = false; // –§–ª–∞–≥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  
  @override
  AuthState build() {
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑ SplashPage
    print('üèÅ AuthProvider: build() –≤—ã–∑–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º initial state');
    return const AuthState.initial();
  }
  
  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> checkAuthStatus() async {
    print('üîÑ AuthProvider: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è
    if (_isProcessing) {
      print('üü° AuthProvider: –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    if (state.maybeWhen(loading: () => true, orElse: () => false)) {
      print('üü° AuthProvider: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ loading, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    _isProcessing = true;
    print('üîÑ AuthProvider: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ loading');
    state = const AuthState.loading();
    
    try {
      final localDataSource = await ref.read(authLocalDataSourceProvider.future);
      final token = await localDataSource.getToken();
      final userData = await localDataSource.getUserData();
      
      if (token != null && token.isNotEmpty && userData != null) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        try {
          final userModel = UserModel.fromJson(userData);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UserModel –≤ UserEntity –¥–ª—è domain —Å–ª–æ—è
          final userEntity = UserEntity(
            id: userModel.id,
            name: userModel.name,
            email: userModel.email,
            role: _parseUserRole(userModel.role),
            username: userModel.username,
            isBlocked: userModel.isBlocked,
          );
          
          if (!userEntity.isBlocked) {
                      print('üü¢ AuthProvider: –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userEntity.email}');
          state = AuthState.authenticated(user: userEntity, token: token);
          _isProcessing = false;
          return;
          } else {
            print('üî¥ AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${userEntity.email}');
          }
        } catch (e) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          await localDataSource.removeToken();
          await localDataSource.removeUserData();
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      print('üî¥ AuthProvider: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      print('üîÑ AuthProvider: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ unauthenticated');
      state = const AuthState.unauthenticated();
    } catch (e) {
      print('üî¥ AuthProvider: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
      print('üîÑ AuthProvider: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ unauthenticated (catch)');
      state = const AuthState.unauthenticated();
    } finally {
      _isProcessing = false;
      print('üîÑ AuthProvider: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ _isProcessing, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.runtimeType}');
    }
  }
  
  /// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<void> login({
    required String email,
    required String password,
  }) async {
    if (email.trim().isEmpty || password.trim().isEmpty) {
      state = const AuthState.error('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }
    

    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è
    if (_isProcessing) {
      print('üü° AuthProvider: Login —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    _isProcessing = true;
    state = const AuthState.loading();
    
    try {
      print('üîµ AuthProvider: –í—ã–∑—ã–≤–∞–µ–º loginUseCase');
      final loginUseCase = ref.read(loginUseCaseProvider);
      
      print('üîµ AuthProvider: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç useCase');  
      final (user, token) = await loginUseCase.call(
        email: email.trim(),
        password: password,
      );
      
      print('üîµ AuthProvider: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - user: ${user.email}, token: $token');
      
      if (user.isBlocked) {
        print('üî¥ AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${user.email}');
        state = const AuthState.error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        return;
      }
      
      print('üîµ AuthProvider: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final localDataSource = await ref.read(authLocalDataSourceProvider.future);
      
      print('üîµ AuthProvider: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω: $token');
      await localDataSource.saveToken(token);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UserEntity –≤ UserModel –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final userModel = UserModel(
        id: user.id,
        name: user.name,
        email: user.email,
        role: _userRoleToString(user.role), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ string
        username: user.username,
        isBlocked: user.isBlocked,
      );
      
      print('üîµ AuthProvider: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userModel.toJson()}');
      await localDataSource.saveUserData(userModel.toJson());
      
      print('üü¢ AuthProvider: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${user.email}');
      state = AuthState.authenticated(user: user, token: token);
    } catch (e) {
      print('üî¥ AuthProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: $e');
      print('üî¥ AuthProvider: Stack trace: ${StackTrace.current}');
      
      String errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
      
      if (e.toString().contains('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
      } else if (e.toString().contains('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')) {
        errorMessage = '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      } else if (e.toString().contains('NetworkException')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
      }
      
      print('üî¥ AuthProvider: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏: $errorMessage');
      state = AuthState.error(errorMessage);
    } finally {
      _isProcessing = false;
    }
  }
  
  /// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è
    if (_isProcessing) {
      print('üü° AuthProvider: Logout —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    _isProcessing = true;
    print('üîµ AuthProvider: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    state = const AuthState.loading();
    
    try {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      print('üîµ AuthProvider: –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      final localDataSource = await ref.read(authLocalDataSourceProvider.future);
      await localDataSource.removeToken();
      await localDataSource.removeUserData();
      
      // –í—ã–∑—ã–≤–∞–µ–º logout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      final logoutUseCase = ref.read(logoutUseCaseProvider);
      await logoutUseCase.call();
      
      print('üü¢ AuthProvider: –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º unauthenticated');
      state = const AuthState.unauthenticated();
    } catch (e) {
      // –î–∞–∂–µ –µ—Å–ª–∏ logout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É–¥–∞–ª—Å—è, –ª–æ–∫–∞–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º
      print('üü° AuthProvider: Logout error (ignored): $e');
      state = const AuthState.unauthenticated();
    } finally {
      _isProcessing = false;
      print('üîÑ AuthProvider: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ _isProcessing –ø–æ—Å–ª–µ logout, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.runtimeType}');
    }
  }
  
  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void clearError() {
    state.whenOrNull(
      error: (_) => state = const AuthState.unauthenticated(),
    );
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  bool _isValidEmail(String email) {
    return RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(email);
  }
  
  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Ä–æ–ª–∏ –≤ UserRole enum
  UserRole _parseUserRole(String roleString) {
    switch (roleString.toLowerCase()) {
      case 'admin':
        return UserRole.admin;
      case 'operator':
        return UserRole.operator;
      case 'warehouse_worker':
        return UserRole.warehouseWorker;
      case 'manager': // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      case 'sales_manager':
        return UserRole.salesManager;
      default:
        return UserRole.warehouseWorker; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
  
  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UserRole enum –≤ —Å—Ç—Ä–æ–∫—É
  String _userRoleToString(UserRole role) {
    switch (role) {
      case UserRole.admin:
        return 'admin';
      case UserRole.operator:
        return 'operator';
      case UserRole.warehouseWorker:
        return 'warehouse_worker';
      case UserRole.salesManager:
        return 'sales_manager';
    }
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@riverpod
UserRole? currentUserRole(CurrentUserRoleRef ref) {
  final authState = ref.watch(authProvider);
  
  return authState.maybeWhen(
    authenticated: (user, _) => user.role,
    orElse: () => null,
  );
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@riverpod
bool isAuthenticated(IsAuthenticatedRef ref) {
  final authState = ref.watch(authProvider);
  
  return authState.maybeWhen(
    authenticated: (_, __) => true,
    orElse: () => false,
  );
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@riverpod
UserEntity? currentUser(CurrentUserRef ref) {
  final authState = ref.watch(authProvider);
  
  return authState.maybeWhen(
    authenticated: (user, _) => user,
    orElse: () => null,
  );
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–æ —Ä–æ–ª—è–º
@riverpod
bool hasAccess(HasAccessRef ref, Set<UserRole> allowedRoles) {
  final currentRole = ref.watch(currentUserRoleProvider);
  
  if (currentRole == null) return false;
  
  return allowedRoles.contains(currentRole);
}

/// –£–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
class AccessRoles {
  /// –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  static const fullAccess = {UserRole.admin};
  
  /// –î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä–∞–º - –∞–¥–º–∏–Ω, –æ–ø–µ—Ä–∞—Ç–æ—Ä, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
  static const productsAccess = {UserRole.admin, UserRole.operator, UserRole.salesManager};
  
  /// –î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø—É—Ç–∏ - –∞–¥–º–∏–Ω, –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
  static const goodsInTransitAccess = {
    UserRole.admin,
    UserRole.operator,
    UserRole.warehouseWorker,
    UserRole.salesManager,
  };
  
  /// –î–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—Å–∞–º - –∞–¥–º–∏–Ω, —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–ë–ï–ó –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
  static const requestsAccess = {
    UserRole.admin,
    UserRole.warehouseWorker,
    UserRole.salesManager,
  };
  
  /// –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–µ–º–∫–µ - –∞–¥–º–∏–Ω, —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞
  static const receptionAccess = {UserRole.admin, UserRole.warehouseWorker};
  
  /// –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–∞–∂–∞–º - –∞–¥–º–∏–Ω, —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞
  static const salesAccess = {UserRole.admin, UserRole.warehouseWorker};
  
  /// –î–æ—Å—Ç—É–ø –∫ –æ—Å—Ç–∞—Ç–∫–∞–º - –∞–¥–º–∏–Ω, –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
  static const inventoryAccess = {
    UserRole.admin,
    UserRole.operator,
    UserRole.warehouseWorker,
    UserRole.salesManager,
  };
  
  /// –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏—è–º–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
  static const companiesAccess = {UserRole.admin};
  
  /// –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
  static const usersAccess = {UserRole.admin};
  
  /// –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–∫–ª–∞–¥–∞–º–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
  static const warehousesAccess = {UserRole.admin};
}
