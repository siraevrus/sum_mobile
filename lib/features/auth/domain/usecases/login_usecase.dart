import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/features/auth/domain/entities/user_entity.dart';
import 'package:sum_warehouse/features/auth/data/repositories/auth_repository_impl.dart';

part 'login_usecase.g.dart';

// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è LoginUseCase –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@riverpod
LoginUseCase loginUseCase(LoginUseCaseRef ref) {
  return LoginUseCase(ref);
}

/// Use case –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É (–±–µ–∑ AsyncNotifier)
class LoginUseCase {
  final LoginUseCaseRef _ref;

  LoginUseCase(this._ref);
  
  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<(UserEntity user, String token)> call({
    required String email,
    required String password,
  }) async {
    print('üîµ LoginUseCase: –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω –¥–ª—è $email');
    
    try {
      final authRepository = await _ref.read(authRepositoryProvider.future);
      final result = await authRepository.login(
        email: email,
        password: password,
      );
      
      print('üü¢ LoginUseCase: –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω –¥–ª—è $email');
      return result;
    } catch (error, stackTrace) {
      print('üî¥ LoginUseCase: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: $error');
      rethrow;
    }
  }
}

// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è LogoutUseCase –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@riverpod
LogoutUseCase logoutUseCase(LogoutUseCaseRef ref) {
  return LogoutUseCase(ref);
}

/// Use case –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ AsyncNotifier)
class LogoutUseCase {
  final LogoutUseCaseRef _ref;

  LogoutUseCase(this._ref);
  
  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> call() async {
    print('üîµ LogoutUseCase: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    try {
      final authRepository = await _ref.read(authRepositoryProvider.future);
      await authRepository.logout();
      
      print('üü¢ LogoutUseCase: –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    } catch (error, stackTrace) {
      print('üî¥ LogoutUseCase: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: $error');
      rethrow;
    }
  }
}