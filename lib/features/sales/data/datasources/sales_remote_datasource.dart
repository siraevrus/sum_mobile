import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/core/error/app_exceptions.dart';
import 'package:sum_warehouse/core/error/error_handler.dart';
import 'package:sum_warehouse/shared/models/api_response_model.dart';
import 'package:sum_warehouse/features/sales/data/models/sale_model.dart';

part 'sales_remote_datasource.g.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø—Ä–æ–¥–∞–∂
abstract class SalesRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  Future<PaginatedResponse<SaleModel>> getSales({
    int page = 1,
    int perPage = 15,
    SaleFilters? filters,
  });

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ø–æ ID
  Future<SaleModel> getSale(int id);

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É
  Future<SaleModel> createSale(CreateSaleRequest request);

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
  Future<SaleModel> updateSale(int id, UpdateSaleRequest request);

  /// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
  Future<void> deleteSale(int id);

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É (—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
  Future<void> processSale(int id);

  /// –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
  Future<void> cancelSale(int id);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –¥–ª—è –ø—Ä–æ–¥–∞–∂
class SalesRemoteDataSourceImpl implements SalesRemoteDataSource {
  final Dio _dio;

  SalesRemoteDataSourceImpl(this._dio);

  @override
  Future<PaginatedResponse<SaleModel>> getSales({
    int page = 1,
    int perPage = 15,
    SaleFilters? filters,
  }) async {
    try {
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      if (filters != null) {
        if (filters.search != null && filters.search!.isNotEmpty) {
          queryParams['search'] = filters.search;
        }
        if (filters.warehouseId != null) {
          queryParams['warehouse_id'] = filters.warehouseId;
        }
        if (filters.paymentStatus != null) {
          queryParams['payment_status'] = filters.paymentStatus;
        }
        if (filters.dateFrom != null) {
          queryParams['date_from'] = filters.dateFrom;
        }
        if (filters.dateTo != null) {
          queryParams['date_to'] = filters.dateTo;
        }
      }

      final response = await _dio.get('/sales', queryParameters: queryParams);

      return PaginatedResponse<SaleModel>.fromJson(
        response.data,
        (json) => SaleModel.fromJson(json as Map<String, dynamic>),
      );
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<SaleModel> getSale(int id) async {
    try {
      final response = await _dio.get('/sales/$id');

      final responseData = response.data;
      if (responseData is Map<String, dynamic>) {
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ–±–µ—Ä–Ω—É—Ç –≤ data —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (responseData.containsKey('data')) {
          return SaleModel.fromJson(responseData['data'] as Map<String, dynamic>);
        } else {
          return SaleModel.fromJson(responseData);
        }
      }

      throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è getSale');
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<SaleModel> createSale(CreateSaleRequest request) async {
    try {
      final requestData = request.toJson();
      
      print('üîµ === –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–ê–ñ–ò ===');
      print('üîµ –ü–æ–ª–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å: $requestData');

      final response = await _dio.post('/sales', data: requestData);
      
      print('üü¢ Sale created successfully: ${response.statusCode}');
      print('üîµ Raw response data: ${response.data}');

      final responseData = response.data;
      print('üîµ Response data type: ${responseData.runtimeType}');
      
      if (responseData is Map<String, dynamic>) {
        Map<String, dynamic> saleData;
        
        if (responseData.containsKey('sale')) {
          saleData = responseData['sale'] as Map<String, dynamic>;
          print('üîµ Using sale field structure');
        } else if (responseData.containsKey('data')) {
          saleData = responseData['data'] as Map<String, dynamic>;
          print('üîµ Using nested data structure');
        } else {
          saleData = responseData;
          print('üîµ Using direct response structure');
        }
        
        print('üîµ Sale data before parsing: $saleData');
        
        try {
          final sale = SaleModel.fromJson(saleData);
          print('üü¢ Sale parsed successfully');
          return sale;
        } catch (e) {
          print('üî¥ Error parsing sale: $e');
          print('üî¥ Sale data that failed: $saleData');
          rethrow;
        }
      } else {
        throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${responseData.runtimeType}');
      }
    } catch (e) {
      print('üî¥ === –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–î–ê–ñ–ò ===');
      print('üî¥ Error creating sale: $e');
      
      if (e is DioException) {
        print('üî¥ DioException details:');
        print('üî¥ Status code: ${e.response?.statusCode}');
        print('üî¥ Response data: ${e.response?.data}');
        print('üî¥ Request data: ${e.requestOptions.data}');
        print('üî¥ Request URL: ${e.requestOptions.uri}');
      }
      
      throw _handleError(e);
    }
  }

  @override
  Future<SaleModel> updateSale(int id, UpdateSaleRequest request) async {
    try {
      print('üîµ Updating sale $id with data: ${request.toJson()}');
      
      final response = await _dio.put('/sales/$id', data: request.toJson());
      
      print('üü¢ Sale updated successfully: ${response.statusCode}');

      final responseData = response.data;
      if (responseData is Map<String, dynamic>) {
        if (responseData.containsKey('data')) {
          return SaleModel.fromJson(responseData['data'] as Map<String, dynamic>);
        } else {
          return SaleModel.fromJson(responseData);
        }
      } else {
        throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${responseData.runtimeType}');
      }
    } catch (e) {
      print('üî¥ Error updating sale: $e');
      throw _handleError(e);
    }
  }

  @override
  Future<void> deleteSale(int id) async {
    try {
      await _dio.delete('/sales/$id');
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<void> processSale(int id) async {
    try {
      await _dio.post('/sales/$id/process');
    } catch (e) {
      throw _handleError(e);
    }
  }

  @override
  Future<void> cancelSale(int id) async {
    try {
      print('üîµ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ ID: $id');
      final response = await _dio.post('/sales/$id/cancel');

      print('üîµ –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏: ${response.statusCode}');
      print('üîµ –û—Ç–≤–µ—Ç –¥–∞–Ω–Ω—ã–µ: ${response.data}');

      if (response.statusCode == 200) {
        print('üîµ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('üî¥ –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏: $e');
      throw _handleError(e);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  AppException _handleError(dynamic error) {
    return ErrorHandler.handleError(error);
  }
}

@riverpod
SalesRemoteDataSource salesRemoteDataSource(SalesRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return SalesRemoteDataSourceImpl(dio);
}