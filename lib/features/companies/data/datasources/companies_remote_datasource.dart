import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:sum_warehouse/core/network/dio_client.dart';
import 'package:sum_warehouse/shared/models/company_model.dart';
import 'package:sum_warehouse/shared/models/warehouse_model.dart';

part 'companies_remote_datasource.g.dart';

/// Remote data source –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
abstract class CompaniesRemoteDataSource {
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
  Future<List<CompanyModel>> getCompanies({
    String? search,
    bool? isActive,
    bool showArchived = false,
    int page = 1,
    int perPage = 15,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID
  Future<CompanyModel> getCompanyById(int id);
  
  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
  Future<CompanyModel> createCompany(CompanyFormModel company);
  
  /// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
  Future<CompanyModel> updateCompany(int id, CompanyFormModel company);
  
  /// –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
  Future<void> archiveCompany(int id);
  
  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –∞—Ä—Ö–∏–≤–∞
  Future<void> restoreCompany(int id);
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–π
  Future<List<CompanyStatsModel>> getCompaniesStats();
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏
  Future<List<WarehouseModel>> getCompanyWarehouses(int companyId);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è remote data source –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
class CompaniesRemoteDataSourceImpl implements CompaniesRemoteDataSource {
  final Dio _dio;
  
  CompaniesRemoteDataSourceImpl(this._dio);
  
  @override
  Future<List<CompanyModel>> getCompanies({
    String? search,
    bool? isActive,
    bool showArchived = false,
    int page = 1,
    int perPage = 15,
  }) async {
    try {
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      
      if (search != null && search.isNotEmpty) queryParams['search'] = search;
      if (isActive != null) queryParams['is_active'] = isActive;
      
      final response = await _dio.get('/companies', queryParameters: queryParams);
      final List<dynamic> data = response.data['data'] as List<dynamic>;
      
      final companies = data.map((json) => CompanyModel.fromJson(json as Map<String, dynamic>)).toList();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (!showArchived) {
        return companies.where((company) => !company.isArchived).toList();
      }
      
      return companies;
    } on DioException catch (e) {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      final mockCompanies = _getMockCompanies();
      if (!showArchived) {
        return mockCompanies.where((company) => !company.isArchived).toList();
      }
      return mockCompanies;
    }
  }
  
  @override
  Future<CompanyModel> getCompanyById(int id) async {
    try {
      final response = await _dio.get('/companies/$id');
      final company = CompanyModel.fromJson(response.data as Map<String, dynamic>);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
      if (company.isArchived) {
        throw Exception('–ö–æ–º–ø–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
      }
      
      return company;
    } on DioException catch (e) {
      final company = _getMockCompanies().firstWhere((company) => company.id == id,
          orElse: () => _getMockCompanies().first);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
      if (company.isArchived) {
        throw Exception('–ö–æ–º–ø–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
      }
      
      return company;
    }
  }
  
  @override
  Future<CompanyModel> createCompany(CompanyFormModel company) async {
    try {
      final response = await _dio.post('/companies', data: company.toJson());
      return CompanyModel.fromJson(response.data as Map<String, dynamic>);
    } on DioException catch (e) {
      // –ú–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è
      return _getMockCompanies().first.copyWith(
        id: DateTime.now().millisecondsSinceEpoch,
        name: company.name ?? '–ù–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        inn: company.inn ?? '0000000000',
        kpp: company.kpp ?? '000000000',
        legalAddress: company.legalAddress ?? '–ù–µ —É–∫–∞–∑–∞–Ω',
        createdAt: DateTime.now(),
      );
    }
  }
  
  @override
  Future<CompanyModel> updateCompany(int id, CompanyFormModel company) async {
    try {
      final response = await _dio.put('/companies/$id', data: company.toJson());
      // Defensive parsing: sometimes API may return partial/empty body.
      final data = response.data;
      // Log response for debugging
      try {
        print('üîµ companies.updateCompany response.data: $data');
      } catch (_) {}
      if (data is Map<String, dynamic> && data['id'] != null) {
        return CompanyModel.fromJson(data);
      }

      // Fallback: fetch full company from server
      try {
        final fresh = await getCompanyById(id);
        return fresh;
      } catch (e) {
        // Log the error and fallback
        print('üî¥ Failed to GET company after update fallback: $e');
        final existing = _getMockCompanies().firstWhere((c) => c.id == id, orElse: () => _getMockCompanies().first);
        return existing.copyWith(
          name: company.name ?? existing.name,
          inn: company.inn ?? existing.inn,
          kpp: company.kpp ?? existing.kpp,
          legalAddress: company.legalAddress ?? existing.legalAddress,
          postalAddress: company.actualAddress ?? existing.postalAddress,
          phoneFax: company.phone ?? existing.phoneFax,
          email: company.email ?? existing.email,
          updatedAt: DateTime.now(),
        );
      }
    } on DioException catch (e) {
      // –ú–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      final existing = _getMockCompanies().firstWhere((c) => c.id == id,
          orElse: () => _getMockCompanies().first);
      return existing.copyWith(
        name: company.name ?? existing.name,
        inn: company.inn ?? existing.inn,
        kpp: company.kpp ?? existing.kpp,
        legalAddress: company.legalAddress ?? existing.legalAddress,
        postalAddress: company.actualAddress ?? existing.postalAddress,
        phoneFax: company.phone ?? existing.phoneFax,
        email: company.email ?? existing.email,
        updatedAt: DateTime.now(),
      );
    }
  }
  
  @override
  Future<void> archiveCompany(int id) async {
    try {
      await _dio.post('/companies/$id/archive');
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /companies/$id/archive –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ${e.message}');
    }
  }

  @override
  Future<void> restoreCompany(int id) async {
    try {
      await _dio.post('/companies/$id/restore');
    } on DioException catch (e) {
      print('‚ö†Ô∏è API /companies/$id/restore –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.response?.statusCode} - ${e.message}.');
      throw Exception('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ${e.message}');
    }
  }
  
  @override
  Future<List<CompanyStatsModel>> getCompaniesStats() async {
    try {
      final response = await _dio.get('/companies/stats');
      final List<dynamic> data = response.data as List<dynamic>;
      
      return data.map((json) => CompanyStatsModel.fromJson(json as Map<String, dynamic>)).toList();
    } on DioException catch (e) {
      return _getMockCompaniesStats();
    }
  }
  
  @override
  Future<List<WarehouseModel>> getCompanyWarehouses(int companyId) async {
    try {
      final response = await _dio.get('/companies/$companyId/warehouses');
      final List<dynamic> data = response.data as List<dynamic>;
      
      return data.map((json) => WarehouseModel.fromJson(json as Map<String, dynamic>)).toList();
    } on DioException catch (e) {
      return _getMockWarehouses().where((w) => w.companyId == companyId).toList();
    }
  }
  
  /// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π
  List<CompanyModel> _getMockCompanies() {
    return [
      CompanyModel(
        id: 1,
        name: '–û–û–û "–°—Ç—Ä–æ–π–ú–∞—Ç –ü–ª—é—Å"',
        legalAddress: '123456, –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, –¥. 15, –æ—Ñ. 301',
        postalAddress: '123456, –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, –¥. 15, –æ—Ñ. 301',
        phoneFax: '+7 (495) 123-45-67',
        email: 'info@stroymat-plus.ru',
        generalDirector: '–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á',
        inn: '7701234567',
        kpp: '770101001',
        ogrn: '1027700123456',
        bank: '–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫',
        accountNumber: '40702810123456789012',
        correspondentAccount: '30101810400000000225',
        bik: '044525225',
        employeesCount: 25,
        warehousesCount: 2,
        isArchived: false,
        createdAt: DateTime.now().subtract(const Duration(days: 180)),
        updatedAt: DateTime.now().subtract(const Duration(days: 5)),
      ),
      CompanyModel(
        id: 2,
        name: '–ê–û "–¢–µ—Ö–Ω–æ–°–∫–ª–∞–¥"',
        legalAddress: '109028, –ú–æ—Å–∫–≤–∞, –•–æ—Ö–ª–æ–≤—Å–∫–∏–π –ø–µ—Ä., –¥. 7-9, —Å—Ç—Ä. 3',
        phoneFax: '+7 (495) 234-56-78',
        email: 'office@technosklad.com',
        generalDirector: '–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        inn: '7702345678',
        kpp: '770201001',
        ogrn: '1027700234567',
        bank: '–ü–ê–û –í–¢–ë',
        accountNumber: '40702810234567890123',
        correspondentAccount: '30101810700000000187',
        bik: '044525187',
        employeesCount: 42,
        warehousesCount: 1,
        isArchived: false,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
        updatedAt: DateTime.now().subtract(const Duration(days: 12)),
      ),
      CompanyModel(
        id: 3,
        name: '–ò–ü –ö–æ–∑–ª–æ–≤ –í.–ú.',
        legalAddress: '115088, –ú–æ—Å–∫–≤–∞, —É–ª. –Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤–∞—è, –¥. 22',
        phoneFax: '+7 (926) 123-45-67',
        email: 'kozlov.vm@mail.ru',
        generalDirector: '–ö–æ–∑–ª–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        inn: '771234567890',
        kpp: '000000000',
        ogrn: '321774600001234',
        bank: '–ü–ê–û –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        accountNumber: '40802810345678901234',
        correspondentAccount: '30101810400000000001',
        bik: '044525001',
        employeesCount: 3,
        warehousesCount: 1,
        isArchived: true,
        archivedAt: DateTime.now().subtract(const Duration(days: 30)),
        createdAt: DateTime.now().subtract(const Duration(days: 90)),
        updatedAt: DateTime.now().subtract(const Duration(days: 30)),
      ),
    ];
  }
  
  /// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π
  List<CompanyStatsModel> _getMockCompaniesStats() {
    return [
      const CompanyStatsModel(
        companyId: 1,
        companyName: '–û–û–û "–°—Ç—Ä–æ–π–ú–∞—Ç –ü–ª—é—Å"',
        warehousesCount: 2,
        employeesCount: 25,
        activeEmployees: 24,
        totalProducts: 1247,
        monthlyRevenue: 2850000.0,
        monthlyOrders: 156,
        status: 'active',
      ),
      const CompanyStatsModel(
        companyId: 2,
        companyName: '–ê–û "–¢–µ—Ö–Ω–æ–°–∫–ª–∞–¥"',
        warehousesCount: 1,
        employeesCount: 42,
        activeEmployees: 40,
        totalProducts: 893,
        monthlyRevenue: 1240000.0,
        monthlyOrders: 89,
        status: 'active',
      ),
      const CompanyStatsModel(
        companyId: 3,
        companyName: '–ò–ü –ö–æ–∑–ª–æ–≤ –í.–ú.',
        warehousesCount: 1,
        employeesCount: 3,
        activeEmployees: 2,
        totalProducts: 45,
        monthlyRevenue: 85000.0,
        monthlyOrders: 12,
        status: 'inactive',
      ),
    ];
  }
  
  /// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤
  List<WarehouseModel> _getMockWarehouses() {
    return [
      const WarehouseModel(
        id: 1,
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥',
        address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, –¥. 15',
        companyId: 1,
        isActive: true,
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-15T10:00:00Z',
        phone: '+7 (495) 123-45-68',
        manager: '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        notes: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        productsCount: 856,
        lowStockCount: 12,
      ),
      const WarehouseModel(
        id: 2,
        name: '–°–∫–ª–∞–¥ ‚Ññ2 (–ü–æ–¥–æ–ª—å—Å–∫)',
        address: '–ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è, –¥. 45',
        companyId: 1,
        isActive: true,
        createdAt: '2024-01-20T09:00:00Z',
        updatedAt: '2024-01-20T09:00:00Z',
        phone: '+7 (4967) 12-34-56',
        manager: '–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
        notes: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –≤ –ü–æ–¥–æ–ª—å—Å–∫–µ',
        productsCount: 391,
        lowStockCount: 11,
      ),
      const WarehouseModel(
        id: 3,
        name: '–¢–µ—Ö–Ω–æ–°–∫–ª–∞–¥ –û—Å–Ω–æ–≤–Ω–æ–π',
        address: '–°–ü–±, –ø—Ä. –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π, –¥. 78',
        companyId: 2,
        isActive: true,
        createdAt: '2024-01-25T11:00:00Z',
        updatedAt: '2024-01-25T11:00:00Z',
        phone: '+7 (812) 234-56-78',
        manager: '–§–µ–¥–æ—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        notes: '–°–∫–ª–∞–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        productsCount: 624,
        lowStockCount: 8,
      ),
    ];
  }
}

/// Provider –¥–ª—è remote data source –∫–æ–º–ø–∞–Ω–∏–π
@riverpod
CompaniesRemoteDataSource companiesRemoteDataSource(CompaniesRemoteDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return CompaniesRemoteDataSourceImpl(dio);
}
