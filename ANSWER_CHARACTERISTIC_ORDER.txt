╔═══════════════════════════════════════════════════════════════════════════╗
║    ❓ ВОПРОС: ПОЧЕМУ ПОРЯДОК ХАРАКТЕРИСТИК ОТЛИЧАЕТСЯ?                   ║
║    Раздел: Поступление товара → Превью карточки → Характеристики товара  ║
╚═══════════════════════════════════════════════════════════════════════════╝


🎯 КРАТКИЙ ОТВЕТ:
═════════════════

При создании товара используется УПОРЯДОЧЕННЫЙ LIST из шаблона.
При просмотре превью используется НЕУПОРЯДОЧЕННЫЙ MAP из товара.


📊 СРАВНЕНИЕ:
═════════════

┌──────────────────────┬────────────────────┬──────────────────────┐
│ Параметр             │ При создании       │ При просмотре       │
├──────────────────────┼────────────────────┼──────────────────────┤
│ Файл                 │ *form_page.dart    │ *detail_page.dart    │
│ Источник             │ _selectedTemplate  │ _product.attributes  │
│ Тип данных           │ List[]             │ Map{}                │
│ Содержит sortOrder   │ ✅ Да              │ ❌ Нет               │
│ Порядок              │ ✅ Четкий (1,2,3)  │ ❌ Случайный         │
│ Строка в коде        │ 585-598            │ 193-197              │
└──────────────────────┴────────────────────┴──────────────────────┘


🔧 ТЕХНИЧЕСКОЕ ОБЪЯСНЕНИЕ:
══════════════════════════

1️⃣ СОЗДАНИЕ ТОВАРА (правильно):
   
   product_inflow_form_page.dart, строка 585-598:
   ──────────────────────────────────────────────
   
   List<Widget> _buildAttributeFields() {
     for (final attribute in _selectedTemplate!.attributes) {
       //                                   ↑
       //                          List - упорядочено!
       fields.add(_buildAttributeField(attribute, controller));
     }
     return fields;
   }
   
   ✅ Результат: Высота, Ширина, Глубина (в правильном порядке)


2️⃣ ПРОСМОТР ПРЕВЬЮ (неправильно):
   
   product_inflow_detail_page.dart, строка 193-197:
   ──────────────────────────────────────────────────
   
   (_product.attributes as Map).entries
     //                         ↑
     //                      Map - НЕУПОРЯДОЧЕНО!
     .map((entry) => _buildInfoRow(...))
     .toList()
   
   ❌ Результат: Может быть Ширина, Глубина, Высота 
                 (или любой другой порядок!)


💡 ЧТО ПРОИСХОДИТ?
══════════════════

API возвращает:

Шаблон (Template):
{
  "attributes": [              ← Это СПИСОК
    {
      "variable": "height",
      "name": "Высота",
      "sortOrder": 1           ← Определяет порядок!
    },
    {
      "variable": "width",
      "name": "Ширина",
      "sortOrder": 2
    }
  ]
}

Товар (Product):
{
  "attributes": {              ← Это СЛОВАРЬ (Map)
    "height": "10",
    "width": "5"
    // Порядок не определен!
  }
}


🐞 ПОЧЕМУ ПОРЯДОК НЕОПРЕДЕЛЕН В MAP?
════════════════════════════════════

Dart Map - это хеш-таблица:
• Не гарантирует порядок элементов
• Порядок зависит от хеша ключей
• При итерации .entries порядок может быть разным
• Даже на одном и том же устройстве порядок может меняться

Пример:
  {"height": 10, "width": 5, "depth": 3}
  
  Запуск 1: .entries → height, width, depth
  Запуск 2: .entries → depth, height, width
  Запуск 3: .entries → width, depth, height
  
  ❌ Порядок каждый раз разный!


✅ КАК ИСПРАВИТЬ?
═════════════════

Нужно использовать ШАБЛОН (который содержит sortOrder) 
при отображении в превью:

Текущий код (❌ НЕПРАВИЛЬНО):
───────────────────────────────
(_product.attributes as Map).entries
    .map((entry) => _buildInfoRow(
        _getAttributeDisplayName(entry.key.toString()),
        entry.value.toString()))
    .toList()


Исправленный код (✅ ПРАВИЛЬНО):
─────────────────────────────────
if (_selectedTemplate != null && _product.attributes != null) {
  // Используем порядок из шаблона
  return _selectedTemplate!.attributes
      .where((attr) => _product.attributes.containsKey(attr.variable))
      .map((attr) => _buildInfoRow(
          attr.name,  // Из шаблона
          _product.attributes[attr.variable].toString()))  // Значение из товара
      .toList();
} else {
  // Фолбэк если нет шаблона
  return (_product.attributes as Map).entries
      .map((entry) => _buildInfoRow(...))
      .toList();
}


📚 ЧТО НУЖНО ПОНЯТЬ:
═══════════════════

1. List - упорядоченная коллекция (0, 1, 2, ...)
   → Гарантирует порядок элементов
   → Используется в шаблоне (template.attributes[])

2. Map - неупорядоченная коллекция (словарь)
   → Не гарантирует порядок элементов  
   → Используется в товаре (product.attributes{})

3. sortOrder - число, определяющее позицию атрибута
   → Хранится в шаблоне
   → Используется для правильного порядка


🎓 ВЫВОД:
═════════

Проблема:    Разные источники данных (List vs Map)
Причина:     Map не гарантирует порядок
Решение:     Всегда использовать List из шаблона
Результат:   Согласованный порядок везде


📖 ДОПОЛНИТЕЛЬНО:
════════════════

Если нужны детали, смотри:
1. CHARACTERISTIC_ORDER_ANALYSIS.md - технический анализ
2. CHARACTERISTIC_ORDER_VISUALIZATION.txt - визуальные схемы
3. CHARACTERISTICS_ORDER_SUMMARY.md - краткое резюме


✨ Надеюсь, объяснение было понятным! 😊
