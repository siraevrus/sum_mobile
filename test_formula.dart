import 'package:math_expressions/math_expressions.dart';

void main() {
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
  final testCases = [
    {'formula': 's * quantity', 'values': {'s': 100.0, 'quantity': 5.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 500
    {'formula': 'a1 * a2', 'values': {'a1': 10.0, 'a2': 20.0}},         // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 200
    {'formula': '(T/1000*S/1000*D/1000)*quantity', 'values': {'T': 50.0, 'S': 100.0, 'D': 200.0, 'quantity': 3.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.03
    {'formula': '(D/1000*S/1000*T/1000)*quantity', 'values': {'D': 100.0, 'S': 200.0, 'T': 50.0, 'quantity': 2.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.02
    {'formula': '(dk1*rk*dp)/20* quantity', 'values': {'dk1': 10.0, 'rk': 5.0, 'dp': 8.0, 'quantity': 4.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 8.0
    {'formula': '(s*v*d)/100* quantity', 'values': {'s': 10.0, 'v': 20.0, 'd': 30.0, 'quantity': 2.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 12.0
    {'formula': '(d*v*s)/1000* quantity', 'values': {'d': 100.0, 'v': 200.0, 's': 50.0, 'quantity': 3.0}},  // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 30.0
  ];

  final parser = Parser();

  print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–æ—Ä–º—É–ª—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π math_expressions');
  print('=' * 60);

  for (final testCase in testCases) {
    final formula = testCase['formula'] as String;
    final values = Map<String, double>.from(testCase['values'] as Map);

    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
    String processedFormula = formula;
    values.forEach((variable, value) {
      processedFormula = processedFormula.replaceAll(variable, value.toString());
    });

    print('üìã –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: $formula');
    print('üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: $processedFormula');
    print('üìä –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: $values');

    try {
      final expression = parser.parse(processedFormula);
      final result = expression.evaluate(EvaluationType.REAL, ContextModel());

      print('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result');
      print('   –¢–∏–ø: ${result.runtimeType}');
      print('');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      print('');
    }
  }

  print('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}
