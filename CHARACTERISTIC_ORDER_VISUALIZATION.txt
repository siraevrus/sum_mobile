╔═══════════════════════════════════════════════════════════════════════════╗
║           ПОРЯДОК ХАРАКТЕРИСТИК: ПРИ СОЗДАНИИ vs ПРИ ПРОСМОТРЕ           ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│ 🟢 ФОРМА СОЗДАНИЯ (Правильный порядок)                                  │
├─────────────────────────────────────────────────────────────────────────┤
│                                                                         │
│ 1. Загружается шаблон товара с backend:                                │
│    ProductTemplate {                                                   │
│      attributes: [                                                     │
│        {id: 1, variable: "height", name: "Высота", sortOrder: 1},    │
│        {id: 2, variable: "width", name: "Ширина", sortOrder: 2},     │
│        {id: 3, variable: "depth", name: "Глубина", sortOrder: 3}     │
│      ]                                                                 │
│    }                                                                   │
│                                                                         │
│ 2. _buildAttributeFields() проходит по массиву в прямом порядке:      │
│    for (final attribute in _selectedTemplate!.attributes)              │
│                                                                         │
│ 3. Результат:                                                          │
│    ✅ Высота      [поле ввода]                                         │
│    ✅ Ширина      [поле ввода]                                         │
│    ✅ Глубина     [поле ввода]                                         │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ 🔴 ПРЕВЬЮ КАРТОЧКИ (Неправильный порядок)                              │
├─────────────────────────────────────────────────────────────────────────┤
│                                                                         │
│ 1. Загружается товар (product) с backend:                              │
│    ProductInflow {                                                     │
│      attributes: {                                                     │
│        "height": "10",                                                 │
│        "width": "5",                                                   │
│        "depth": "3"                                                    │
│      }  ← ЭТО MAP, НЕ List!                                            │
│    }                                                                   │
│                                                                         │
│ 2. (_product.attributes as Map).entries проходит БЕЗ ГАРАНТИИ ПОРЯДКА: │
│    for (final entry in (_product.attributes as Map).entries)           │
│                                                                         │
│ 3. Результаты (НЕПРЕДСКАЗУЕМЫЕ):                                       │
│    Результат 1:  Ширина (5), Высота (10), Глубина (3)                 │
│    Результат 2:  Глубина (3), Ширина (5), Высота (10)                 │
│    Результат 3:  Высота (10), Глубина (3), Ширина (5)                 │
│    ❌ ПОРЯДОК КАЖДЫЙ РАЗ РАЗНЫЙ!                                       │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ 📊 ПОЧЕМУ ТАК ПРОИСХОДИТ?                                               │
├─────────────────────────────────────────────────────────────────────────┤
│                                                                         │
│ Dart Map:                                                              │
│ • Не гарантирует порядок элементов при итерации                       │
│ • Использует хеширование для быстрого поиска                          │
│ • Порядок зависит от реализации HashMap                               │
│                                                                         │
│ List (как в шаблоне):                                                  │
│ • Имеет четкий порядок (0, 1, 2, ...)                                 │
│ • sortOrder хранит правильный порядок                                  │
│ • Гарантированный порядок при итерации                                │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ ✅ КАК ИСПРАВИТЬ?                                                       │
├─────────────────────────────────────────────────────────────────────────┤
│                                                                         │
│ Вариант 1: Использовать шаблон при отображении                        │
│ ────────────────────────────────────────────────                       │
│ Когда загружаем товар, загруженный шаблон содержит правильный порядок: │
│                                                                         │
│ for (final attr in _loadedTemplate!.attributes)  ← Порядок из БД      │
│   if (_product.attributes.containsKey(attr.variable))                  │
│     _buildInfoRow(attr.name, _product.attributes[attr.variable])      │
│                                                                         │
│                                                                         │
│ Вариант 2: Отсортировать Map по алфавиту (менее идеально)             │
│ ───────────────────────────────────────────────────────────            │
│ final sorted = (_product.attributes as Map).entries                    │
│   .toList()                                                            │
│   ..sort((a, b) => a.key.compareTo(b.key));                           │
│                                                                         │
│ ⚠️ Это даст алфавитный порядок, но не sortOrder!                       │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

